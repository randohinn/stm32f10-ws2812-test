
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f48  08002f48  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002f48  08002f48  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f48  08002f48  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f48  08002f48  00012f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f4c  08002f4c  00012f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000078  08002fc8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08002fc8  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6b9  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b84  00000000  00000000  0002a75a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a98  00000000  00000000  0002c2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b0  00000000  00000000  0002cd78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000173e9  00000000  00000000  0002d728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000917f  00000000  00000000  00044b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087833  00000000  00000000  0004dc90  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d54c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c30  00000000  00000000  000d5540  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e0c 	.word	0x08002e0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002e0c 	.word	0x08002e0c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 ff50 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f807 	bl	8000166 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f84a 	bl	80001f0 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  visInit();
 800015c:	f000 fa84 	bl	8000668 <visInit>

   while (1)
   {
 	  visHandle();
 8000160:	f000 faa0 	bl	80006a4 <visHandle>
   {
 8000164:	e7fc      	b.n	8000160 <main+0x14>

08000166 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b090      	sub	sp, #64	; 0x40
 800016a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016c:	f107 0318 	add.w	r3, r7, #24
 8000170:	2228      	movs	r2, #40	; 0x28
 8000172:	2100      	movs	r1, #0
 8000174:	4618      	mov	r0, r3
 8000176:	f002 fd99 	bl	8002cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017a:	1d3b      	adds	r3, r7, #4
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	605a      	str	r2, [r3, #4]
 8000182:	609a      	str	r2, [r3, #8]
 8000184:	60da      	str	r2, [r3, #12]
 8000186:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000188:	2301      	movs	r3, #1
 800018a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800018c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000190:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000192:	2300      	movs	r3, #0
 8000194:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000196:	2301      	movs	r3, #1
 8000198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019a:	2302      	movs	r3, #2
 800019c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800019e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	4618      	mov	r0, r3
 80001b0:	f001 fc1a 	bl	80019e8 <HAL_RCC_OscConfig>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001ba:	f000 f82f 	bl	800021c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001be:	230f      	movs	r3, #15
 80001c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c2:	2302      	movs	r3, #2
 80001c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2102      	movs	r1, #2
 80001d8:	4618      	mov	r0, r3
 80001da:	f001 fe85 	bl	8001ee8 <HAL_RCC_ClockConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001e4:	f000 f81a 	bl	800021c <Error_Handler>
  }
}
 80001e8:	bf00      	nop
 80001ea:	3740      	adds	r7, #64	; 0x40
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f6:	4b08      	ldr	r3, [pc, #32]	; (8000218 <MX_GPIO_Init+0x28>)
 80001f8:	699b      	ldr	r3, [r3, #24]
 80001fa:	4a07      	ldr	r2, [pc, #28]	; (8000218 <MX_GPIO_Init+0x28>)
 80001fc:	f043 0320 	orr.w	r3, r3, #32
 8000200:	6193      	str	r3, [r2, #24]
 8000202:	4b05      	ldr	r3, [pc, #20]	; (8000218 <MX_GPIO_Init+0x28>)
 8000204:	699b      	ldr	r3, [r3, #24]
 8000206:	f003 0320 	and.w	r3, r3, #32
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687b      	ldr	r3, [r7, #4]

}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr
 8000218:	40021000 	.word	0x40021000

0800021c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000220:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000222:	e7fe      	b.n	8000222 <Error_Handler+0x6>

08000224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800022a:	4b15      	ldr	r3, [pc, #84]	; (8000280 <HAL_MspInit+0x5c>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a14      	ldr	r2, [pc, #80]	; (8000280 <HAL_MspInit+0x5c>)
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b12      	ldr	r3, [pc, #72]	; (8000280 <HAL_MspInit+0x5c>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0301 	and.w	r3, r3, #1
 800023e:	60bb      	str	r3, [r7, #8]
 8000240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000242:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <HAL_MspInit+0x5c>)
 8000244:	69db      	ldr	r3, [r3, #28]
 8000246:	4a0e      	ldr	r2, [pc, #56]	; (8000280 <HAL_MspInit+0x5c>)
 8000248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800024c:	61d3      	str	r3, [r2, #28]
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <HAL_MspInit+0x5c>)
 8000250:	69db      	ldr	r3, [r3, #28]
 8000252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000256:	607b      	str	r3, [r7, #4]
 8000258:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800025a:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <HAL_MspInit+0x60>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800026e:	60fb      	str	r3, [r7, #12]
 8000270:	4a04      	ldr	r2, [pc, #16]	; (8000284 <HAL_MspInit+0x60>)
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	40021000 	.word	0x40021000
 8000284:	40010000 	.word	0x40010000

08000288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800028c:	e7fe      	b.n	800028c <NMI_Handler+0x4>

0800028e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800028e:	b480      	push	{r7}
 8000290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000292:	e7fe      	b.n	8000292 <HardFault_Handler+0x4>

08000294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000298:	e7fe      	b.n	8000298 <MemManage_Handler+0x4>

0800029a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800029a:	b480      	push	{r7}
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800029e:	e7fe      	b.n	800029e <BusFault_Handler+0x4>

080002a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002a4:	e7fe      	b.n	80002a4 <UsageFault_Handler+0x4>

080002a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002a6:	b480      	push	{r7}
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002aa:	bf00      	nop
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr

080002b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr

080002be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002be:	b480      	push	{r7}
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002c2:	bf00      	nop
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr

080002ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ca:	b580      	push	{r7, lr}
 80002cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002ce:	f000 fed7 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80002e0:	4a14      	ldr	r2, [pc, #80]	; (8000334 <_sbrk+0x5c>)
 80002e2:	4b15      	ldr	r3, [pc, #84]	; (8000338 <_sbrk+0x60>)
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80002ec:	4b13      	ldr	r3, [pc, #76]	; (800033c <_sbrk+0x64>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d102      	bne.n	80002fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <_sbrk+0x64>)
 80002f6:	4a12      	ldr	r2, [pc, #72]	; (8000340 <_sbrk+0x68>)
 80002f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <_sbrk+0x64>)
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4413      	add	r3, r2
 8000302:	693a      	ldr	r2, [r7, #16]
 8000304:	429a      	cmp	r2, r3
 8000306:	d207      	bcs.n	8000318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000308:	f002 fca6 	bl	8002c58 <__errno>
 800030c:	4602      	mov	r2, r0
 800030e:	230c      	movs	r3, #12
 8000310:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000312:	f04f 33ff 	mov.w	r3, #4294967295
 8000316:	e009      	b.n	800032c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <_sbrk+0x64>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800031e:	4b07      	ldr	r3, [pc, #28]	; (800033c <_sbrk+0x64>)
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4413      	add	r3, r2
 8000326:	4a05      	ldr	r2, [pc, #20]	; (800033c <_sbrk+0x64>)
 8000328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800032a:	68fb      	ldr	r3, [r7, #12]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3718      	adds	r7, #24
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20005000 	.word	0x20005000
 8000338:	00000400 	.word	0x00000400
 800033c:	20000094 	.word	0x20000094
 8000340:	20000370 	.word	0x20000370

08000344 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <Wheel>:
#define Red(c) ((uint8_t)((c >> 16) & 0xFF))
#define Green(c) ((uint8_t)((c >> 8) & 0xFF))
#define Blue(c) ((uint8_t)(c & 0xFF))


uint32_t Wheel(uint8_t WheelPos) {
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
  WheelPos = 255 - WheelPos;
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	43db      	mvns	r3, r3
 800035e:	71fb      	strb	r3, [r7, #7]
  if(WheelPos < 85) {
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	2b54      	cmp	r3, #84	; 0x54
 8000364:	d80b      	bhi.n	800037e <Wheel+0x2e>
    return newColor(255 - WheelPos * 3, 0, WheelPos * 3);
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	461a      	mov	r2, r3
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	1ad3      	subs	r3, r2, r3
 800036e:	33ff      	adds	r3, #255	; 0xff
 8000370:	0419      	lsls	r1, r3, #16
 8000372:	79fa      	ldrb	r2, [r7, #7]
 8000374:	4613      	mov	r3, r2
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	4413      	add	r3, r2
 800037a:	430b      	orrs	r3, r1
 800037c:	e020      	b.n	80003c0 <Wheel+0x70>
  }
  if(WheelPos < 170) {
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2ba9      	cmp	r3, #169	; 0xa9
 8000382:	d80e      	bhi.n	80003a2 <Wheel+0x52>
    WheelPos -= 85;
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	3b55      	subs	r3, #85	; 0x55
 8000388:	71fb      	strb	r3, [r7, #7]
    return newColor(0, WheelPos * 3, 255 - WheelPos * 3);
 800038a:	79fa      	ldrb	r2, [r7, #7]
 800038c:	4613      	mov	r3, r2
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	4413      	add	r3, r2
 8000392:	021a      	lsls	r2, r3, #8
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	4619      	mov	r1, r3
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	1acb      	subs	r3, r1, r3
 800039c:	33ff      	adds	r3, #255	; 0xff
 800039e:	4313      	orrs	r3, r2
 80003a0:	e00e      	b.n	80003c0 <Wheel+0x70>
  }
  WheelPos -= 170;
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	3356      	adds	r3, #86	; 0x56
 80003a6:	71fb      	strb	r3, [r7, #7]
  return newColor(WheelPos * 3, 255 - WheelPos * 3, 0);
 80003a8:	79fa      	ldrb	r2, [r7, #7]
 80003aa:	4613      	mov	r3, r2
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	4413      	add	r3, r2
 80003b0:	041a      	lsls	r2, r3, #16
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	4619      	mov	r1, r3
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	1acb      	subs	r3, r1, r3
 80003ba:	33ff      	adds	r3, #255	; 0xff
 80003bc:	021b      	lsls	r3, r3, #8
 80003be:	4313      	orrs	r3, r2
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
	...

080003cc <visRainbow>:




void visRainbow(uint8_t *frameBuffer, uint32_t frameBufferSize, uint32_t effectLength)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
	uint32_t i;
	static uint8_t x = 0;

	x += 1;
 80003d8:	4b22      	ldr	r3, [pc, #136]	; (8000464 <visRainbow+0x98>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	3301      	adds	r3, #1
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4b20      	ldr	r3, [pc, #128]	; (8000464 <visRainbow+0x98>)
 80003e2:	701a      	strb	r2, [r3, #0]

	if(x == 256*5)
		x = 0;

	for( i = 0; i < frameBufferSize / 3; i++)
 80003e4:	2300      	movs	r3, #0
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	e02f      	b.n	800044a <visRainbow+0x7e>
	{
		uint32_t color = Wheel(((i * 256) / effectLength + x) & 0xFF);
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	021a      	lsls	r2, r3, #8
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003f4:	b2da      	uxtb	r2, r3
 80003f6:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <visRainbow+0x98>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	4413      	add	r3, r2
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff ffa6 	bl	8000350 <Wheel>
 8000404:	6138      	str	r0, [r7, #16]

		frameBuffer[i*3 + 0] = color & 0xFF;
 8000406:	697a      	ldr	r2, [r7, #20]
 8000408:	4613      	mov	r3, r2
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	4413      	add	r3, r2
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	4413      	add	r3, r2
 8000412:	693a      	ldr	r2, [r7, #16]
 8000414:	b2d2      	uxtb	r2, r2
 8000416:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 1] = color >> 8 & 0xFF;
 8000418:	693b      	ldr	r3, [r7, #16]
 800041a:	0a19      	lsrs	r1, r3, #8
 800041c:	697a      	ldr	r2, [r7, #20]
 800041e:	4613      	mov	r3, r2
 8000420:	005b      	lsls	r3, r3, #1
 8000422:	4413      	add	r3, r2
 8000424:	3301      	adds	r3, #1
 8000426:	68fa      	ldr	r2, [r7, #12]
 8000428:	4413      	add	r3, r2
 800042a:	b2ca      	uxtb	r2, r1
 800042c:	701a      	strb	r2, [r3, #0]
		frameBuffer[i*3 + 2] = color >> 16 & 0xFF;
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	0c19      	lsrs	r1, r3, #16
 8000432:	697a      	ldr	r2, [r7, #20]
 8000434:	4613      	mov	r3, r2
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	4413      	add	r3, r2
 800043a:	3302      	adds	r3, #2
 800043c:	68fa      	ldr	r2, [r7, #12]
 800043e:	4413      	add	r3, r2
 8000440:	b2ca      	uxtb	r2, r1
 8000442:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < frameBufferSize / 3; i++)
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	3301      	adds	r3, #1
 8000448:	617b      	str	r3, [r7, #20]
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	4a06      	ldr	r2, [pc, #24]	; (8000468 <visRainbow+0x9c>)
 800044e:	fba2 2303 	umull	r2, r3, r2, r3
 8000452:	085b      	lsrs	r3, r3, #1
 8000454:	697a      	ldr	r2, [r7, #20]
 8000456:	429a      	cmp	r2, r3
 8000458:	d3c7      	bcc.n	80003ea <visRainbow+0x1e>
	}
}
 800045a:	bf00      	nop
 800045c:	3718      	adds	r7, #24
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000098 	.word	0x20000098
 8000468:	aaaaaaab 	.word	0xaaaaaaab

0800046c <visDots>:


void visDots(uint8_t *frameBuffer, uint32_t frameBufferSize, uint32_t random, uint32_t fadeOutFactor)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
 8000478:	603b      	str	r3, [r7, #0]
	uint32_t i;

	for( i = 0; i < frameBufferSize / 3; i++)
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
 800047e:	e0c2      	b.n	8000606 <visDots+0x19a>
	{

		if(rand() % random == 0)
 8000480:	f002 fc1c 	bl	8002cbc <rand>
 8000484:	4603      	mov	r3, r0
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	fbb3 f2f2 	udiv	r2, r3, r2
 800048c:	6879      	ldr	r1, [r7, #4]
 800048e:	fb01 f202 	mul.w	r2, r1, r2
 8000492:	1a9b      	subs	r3, r3, r2
 8000494:	2b00      	cmp	r3, #0
 8000496:	d119      	bne.n	80004cc <visDots+0x60>
		{
			frameBuffer[i*3 + 0] = 255;
 8000498:	697a      	ldr	r2, [r7, #20]
 800049a:	4613      	mov	r3, r2
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	4413      	add	r3, r2
 80004a0:	68fa      	ldr	r2, [r7, #12]
 80004a2:	4413      	add	r3, r2
 80004a4:	22ff      	movs	r2, #255	; 0xff
 80004a6:	701a      	strb	r2, [r3, #0]
			frameBuffer[i*3 + 1] = 255;
 80004a8:	697a      	ldr	r2, [r7, #20]
 80004aa:	4613      	mov	r3, r2
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	4413      	add	r3, r2
 80004b0:	3301      	adds	r3, #1
 80004b2:	68fa      	ldr	r2, [r7, #12]
 80004b4:	4413      	add	r3, r2
 80004b6:	22ff      	movs	r2, #255	; 0xff
 80004b8:	701a      	strb	r2, [r3, #0]
			frameBuffer[i*3 + 2] = 255;
 80004ba:	697a      	ldr	r2, [r7, #20]
 80004bc:	4613      	mov	r3, r2
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	4413      	add	r3, r2
 80004c2:	3302      	adds	r3, #2
 80004c4:	68fa      	ldr	r2, [r7, #12]
 80004c6:	4413      	add	r3, r2
 80004c8:	22ff      	movs	r2, #255	; 0xff
 80004ca:	701a      	strb	r2, [r3, #0]
		}


		if(frameBuffer[i*3 + 0] > fadeOutFactor)
 80004cc:	697a      	ldr	r2, [r7, #20]
 80004ce:	4613      	mov	r3, r2
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	4413      	add	r3, r2
 80004d4:	68fa      	ldr	r2, [r7, #12]
 80004d6:	4413      	add	r3, r2
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	461a      	mov	r2, r3
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	4293      	cmp	r3, r2
 80004e0:	d21c      	bcs.n	800051c <visDots+0xb0>
			frameBuffer[i*3 + 0] -= frameBuffer[i*3 + 0]/fadeOutFactor;
 80004e2:	697a      	ldr	r2, [r7, #20]
 80004e4:	4613      	mov	r3, r2
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	4413      	add	r3, r2
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	4413      	add	r3, r2
 80004ee:	7818      	ldrb	r0, [r3, #0]
 80004f0:	697a      	ldr	r2, [r7, #20]
 80004f2:	4613      	mov	r3, r2
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	4413      	add	r3, r2
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	4413      	add	r3, r2
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	461a      	mov	r2, r3
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	fbb2 f3f3 	udiv	r3, r2, r3
 8000506:	b2d9      	uxtb	r1, r3
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	4613      	mov	r3, r2
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	4413      	add	r3, r2
 8000510:	68fa      	ldr	r2, [r7, #12]
 8000512:	4413      	add	r3, r2
 8000514:	1a42      	subs	r2, r0, r1
 8000516:	b2d2      	uxtb	r2, r2
 8000518:	701a      	strb	r2, [r3, #0]
 800051a:	e007      	b.n	800052c <visDots+0xc0>
		else
			frameBuffer[i*3 + 0] = 0;
 800051c:	697a      	ldr	r2, [r7, #20]
 800051e:	4613      	mov	r3, r2
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	4413      	add	r3, r2
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	4413      	add	r3, r2
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]

		if(frameBuffer[i*3 + 1] > fadeOutFactor)
 800052c:	697a      	ldr	r2, [r7, #20]
 800052e:	4613      	mov	r3, r2
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	4413      	add	r3, r2
 8000534:	3301      	adds	r3, #1
 8000536:	68fa      	ldr	r2, [r7, #12]
 8000538:	4413      	add	r3, r2
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	4293      	cmp	r3, r2
 8000542:	d21f      	bcs.n	8000584 <visDots+0x118>
			frameBuffer[i*3 + 1] -= frameBuffer[i*3 + 1]/fadeOutFactor;
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	4613      	mov	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4413      	add	r3, r2
 800054c:	3301      	adds	r3, #1
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	4413      	add	r3, r2
 8000552:	7818      	ldrb	r0, [r3, #0]
 8000554:	697a      	ldr	r2, [r7, #20]
 8000556:	4613      	mov	r3, r2
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	4413      	add	r3, r2
 800055c:	3301      	adds	r3, #1
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	fbb2 f3f3 	udiv	r3, r2, r3
 800056c:	b2d9      	uxtb	r1, r3
 800056e:	697a      	ldr	r2, [r7, #20]
 8000570:	4613      	mov	r3, r2
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	4413      	add	r3, r2
 8000576:	3301      	adds	r3, #1
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	4413      	add	r3, r2
 800057c:	1a42      	subs	r2, r0, r1
 800057e:	b2d2      	uxtb	r2, r2
 8000580:	701a      	strb	r2, [r3, #0]
 8000582:	e008      	b.n	8000596 <visDots+0x12a>
		else
			frameBuffer[i*3 + 1] = 0;
 8000584:	697a      	ldr	r2, [r7, #20]
 8000586:	4613      	mov	r3, r2
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	4413      	add	r3, r2
 800058c:	3301      	adds	r3, #1
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	4413      	add	r3, r2
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]

		if(frameBuffer[i*3 + 2] > fadeOutFactor)
 8000596:	697a      	ldr	r2, [r7, #20]
 8000598:	4613      	mov	r3, r2
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	4413      	add	r3, r2
 800059e:	3302      	adds	r3, #2
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	4413      	add	r3, r2
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	461a      	mov	r2, r3
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d21f      	bcs.n	80005ee <visDots+0x182>
			frameBuffer[i*3 + 2] -= frameBuffer[i*3 + 2]/fadeOutFactor;
 80005ae:	697a      	ldr	r2, [r7, #20]
 80005b0:	4613      	mov	r3, r2
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	4413      	add	r3, r2
 80005b6:	3302      	adds	r3, #2
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	4413      	add	r3, r2
 80005bc:	7818      	ldrb	r0, [r3, #0]
 80005be:	697a      	ldr	r2, [r7, #20]
 80005c0:	4613      	mov	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	4413      	add	r3, r2
 80005c6:	3302      	adds	r3, #2
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d6:	b2d9      	uxtb	r1, r3
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	4613      	mov	r3, r2
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	4413      	add	r3, r2
 80005e0:	3302      	adds	r3, #2
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	4413      	add	r3, r2
 80005e6:	1a42      	subs	r2, r0, r1
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	701a      	strb	r2, [r3, #0]
 80005ec:	e008      	b.n	8000600 <visDots+0x194>
		else
			frameBuffer[i*3 + 2] = 0;
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	4613      	mov	r3, r2
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	4413      	add	r3, r2
 80005f6:	3302      	adds	r3, #2
 80005f8:	68fa      	ldr	r2, [r7, #12]
 80005fa:	4413      	add	r3, r2
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < frameBufferSize / 3; i++)
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	3301      	adds	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	4a05      	ldr	r2, [pc, #20]	; (8000620 <visDots+0x1b4>)
 800060a:	fba2 2303 	umull	r2, r3, r2, r3
 800060e:	085b      	lsrs	r3, r3, #1
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	429a      	cmp	r2, r3
 8000614:	f4ff af34 	bcc.w	8000480 <visDots+0x14>
	}
}
 8000618:	bf00      	nop
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	aaaaaaab 	.word	0xaaaaaaab

08000624 <visHandle2>:



void visHandle2()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	static uint32_t timestamp;

	if(HAL_GetTick() - timestamp > 10)
 8000628:	f000 fd3c 	bl	80010a4 <HAL_GetTick>
 800062c:	4602      	mov	r2, r0
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <visHandle2+0x38>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	2b0a      	cmp	r3, #10
 8000636:	d90f      	bls.n	8000658 <visHandle2+0x34>
	{
		timestamp = HAL_GetTick();
 8000638:	f000 fd34 	bl	80010a4 <HAL_GetTick>
 800063c:	4602      	mov	r2, r0
 800063e:	4b07      	ldr	r3, [pc, #28]	; (800065c <visHandle2+0x38>)
 8000640:	601a      	str	r2, [r3, #0]

		visRainbow(frameBuffer, sizeof(frameBuffer), 15);
 8000642:	220f      	movs	r2, #15
 8000644:	21b4      	movs	r1, #180	; 0xb4
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <visHandle2+0x3c>)
 8000648:	f7ff fec0 	bl	80003cc <visRainbow>
		visDots(frameBuffer2, sizeof(frameBuffer2), 50, 40);
 800064c:	2328      	movs	r3, #40	; 0x28
 800064e:	2232      	movs	r2, #50	; 0x32
 8000650:	213c      	movs	r1, #60	; 0x3c
 8000652:	4804      	ldr	r0, [pc, #16]	; (8000664 <visHandle2+0x40>)
 8000654:	f7ff ff0a 	bl	800046c <visDots>
				visDots(frameBuffer, sizeof(frameBuffer), 50, 40);
				break;

		}*/
	}
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000009c 	.word	0x2000009c
 8000660:	20000100 	.word	0x20000100
 8000664:	200000a8 	.word	0x200000a8

08000668 <visInit>:


void visInit()
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	// Set output channel/pin, GPIO_PIN_0 = 0, for GPIO_PIN_5 = 5 - this has to correspond to WS2812B_PINS
	ws2812b.item[0].channel = 2;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <visInit+0x30>)
 800066e:	2202      	movs	r2, #2
 8000670:	731a      	strb	r2, [r3, #12]
	// Your RGB framebuffer
	ws2812b.item[0].frameBufferPointer = frameBuffer;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <visInit+0x30>)
 8000674:	4a09      	ldr	r2, [pc, #36]	; (800069c <visInit+0x34>)
 8000676:	601a      	str	r2, [r3, #0]
	// RAW size of framebuffer
	ws2812b.item[0].frameBufferSize = sizeof(frameBuffer);
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <visInit+0x30>)
 800067a:	22b4      	movs	r2, #180	; 0xb4
 800067c:	605a      	str	r2, [r3, #4]


	// If you need more parallel LED strips, increase the WS2812_BUFFER_COUNT value
	ws2812b.item[1].channel = 3;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <visInit+0x30>)
 8000680:	2203      	movs	r2, #3
 8000682:	771a      	strb	r2, [r3, #28]
	ws2812b.item[1].frameBufferPointer = frameBuffer2;
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <visInit+0x30>)
 8000686:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <visInit+0x38>)
 8000688:	611a      	str	r2, [r3, #16]
	ws2812b.item[1].frameBufferSize = sizeof(frameBuffer2);
 800068a:	4b03      	ldr	r3, [pc, #12]	; (8000698 <visInit+0x30>)
 800068c:	223c      	movs	r2, #60	; 0x3c
 800068e:	615a      	str	r2, [r3, #20]


	ws2812b_init();
 8000690:	f000 fc6a 	bl	8000f68 <ws2812b_init>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000e4 	.word	0x200000e4
 800069c:	20000100 	.word	0x20000100
 80006a0:	200000a8 	.word	0x200000a8

080006a4 <visHandle>:


void visHandle()
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

	if(ws2812b.transferComplete)
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <visHandle+0x20>)
 80006aa:	7c1b      	ldrb	r3, [r3, #16]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d006      	beq.n	80006be <visHandle+0x1a>
	{
		// Update your framebuffer here or swap buffers
		visHandle2();
 80006b0:	f7ff ffb8 	bl	8000624 <visHandle2>

		// Signal that buffer is changed and transfer new data
		ws2812b.startTransfer = 1;
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <visHandle+0x20>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	745a      	strb	r2, [r3, #17]
		ws2812b_handle();
 80006ba:	f000 fc65 	bl	8000f88 <ws2812b_handle>
	}
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200000e4 	.word	0x200000e4

080006c8 <ws2812b_gpio_init>:
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };

static void ws2812b_gpio_init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
	// WS2812B outputs
	WS2812B_GPIO_CLK_ENABLE();
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <ws2812b_gpio_init+0x74>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	4a1a      	ldr	r2, [pc, #104]	; (800073c <ws2812b_gpio_init+0x74>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6193      	str	r3, [r2, #24]
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <ws2812b_gpio_init+0x74>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin       = WS2812B_PINS;
 80006e6:	230c      	movs	r3, #12
 80006e8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 80006f2:	2302      	movs	r3, #2
 80006f4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	4619      	mov	r1, r3
 80006fc:	4810      	ldr	r0, [pc, #64]	; (8000740 <ws2812b_gpio_init+0x78>)
 80006fe:	f001 f819 	bl	8001734 <HAL_GPIO_Init>

	// Enable output pins for debuging to see DMA Full and Half transfer interrupts
	#if defined(LED4_PORT) && defined(LED5_PORT)
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	617b      	str	r3, [r7, #20]

		GPIO_InitStruct.Pin = LED4_PIN;
 800070e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000712:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(LED4_PORT, &GPIO_InitStruct);
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	4619      	mov	r1, r3
 800071a:	480a      	ldr	r0, [pc, #40]	; (8000744 <ws2812b_gpio_init+0x7c>)
 800071c:	f001 f80a 	bl	8001734 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = LED5_PIN;
 8000720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000724:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(LED5_PORT, &GPIO_InitStruct);
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	4619      	mov	r1, r3
 800072c:	4805      	ldr	r0, [pc, #20]	; (8000744 <ws2812b_gpio_init+0x7c>)
 800072e:	f001 f801 	bl	8001734 <HAL_GPIO_Init>
	#endif
}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000
 8000740:	40010800 	.word	0x40010800
 8000744:	40011000 	.word	0x40011000

08000748 <TIM2_init>:
TIM_OC_InitTypeDef tim2OC1;
TIM_OC_InitTypeDef tim2OC2;

uint32_t tim_period;
static void TIM2_init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
	// TIM2 Periph clock enable
	__HAL_RCC_TIM2_CLK_ENABLE();
 800074e:	4b42      	ldr	r3, [pc, #264]	; (8000858 <TIM2_init+0x110>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a41      	ldr	r2, [pc, #260]	; (8000858 <TIM2_init+0x110>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b3f      	ldr	r3, [pc, #252]	; (8000858 <TIM2_init+0x110>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

	// This computation of pulse length should work ok,
	// at some slower core speeds it needs some tuning.
	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 8000766:	4b3d      	ldr	r3, [pc, #244]	; (800085c <TIM2_init+0x114>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	0a1b      	lsrs	r3, r3, #8
 800076c:	4a3c      	ldr	r2, [pc, #240]	; (8000860 <TIM2_init+0x118>)
 800076e:	fba2 2303 	umull	r2, r3, r2, r3
 8000772:	091b      	lsrs	r3, r3, #4
 8000774:	4a3b      	ldr	r2, [pc, #236]	; (8000864 <TIM2_init+0x11c>)
 8000776:	6013      	str	r3, [r2, #0]
	uint32_t cc1 = (10 * tim_period) / 36;
 8000778:	4b3a      	ldr	r3, [pc, #232]	; (8000864 <TIM2_init+0x11c>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4613      	mov	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	461a      	mov	r2, r3
 8000786:	4b38      	ldr	r3, [pc, #224]	; (8000868 <TIM2_init+0x120>)
 8000788:	fba3 2302 	umull	r2, r3, r3, r2
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	60fb      	str	r3, [r7, #12]
	uint32_t cc2 = (10 * tim_period) / 15;
 8000790:	4b34      	ldr	r3, [pc, #208]	; (8000864 <TIM2_init+0x11c>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4613      	mov	r3, r2
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4413      	add	r3, r2
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	461a      	mov	r2, r3
 800079e:	4b33      	ldr	r3, [pc, #204]	; (800086c <TIM2_init+0x124>)
 80007a0:	fba3 2302 	umull	r2, r3, r3, r2
 80007a4:	08db      	lsrs	r3, r3, #3
 80007a6:	60bb      	str	r3, [r7, #8]

	Tim2Handle.Instance = TIM2;
 80007a8:	4b31      	ldr	r3, [pc, #196]	; (8000870 <TIM2_init+0x128>)
 80007aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ae:	601a      	str	r2, [r3, #0]

	Tim2Handle.Init.Period            = tim_period;
 80007b0:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <TIM2_init+0x11c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a2e      	ldr	r2, [pc, #184]	; (8000870 <TIM2_init+0x128>)
 80007b6:	60d3      	str	r3, [r2, #12]
	Tim2Handle.Init.RepetitionCounter = 0;
 80007b8:	4b2d      	ldr	r3, [pc, #180]	; (8000870 <TIM2_init+0x128>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
	Tim2Handle.Init.Prescaler         = 0;
 80007be:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <TIM2_init+0x128>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
	Tim2Handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80007c4:	4b2a      	ldr	r3, [pc, #168]	; (8000870 <TIM2_init+0x128>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
	Tim2Handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 80007ca:	4b29      	ldr	r3, [pc, #164]	; (8000870 <TIM2_init+0x128>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
	HAL_TIM_PWM_Init(&Tim2Handle);
 80007d0:	4827      	ldr	r0, [pc, #156]	; (8000870 <TIM2_init+0x128>)
 80007d2:	f001 fd3d 	bl	8002250 <HAL_TIM_PWM_Init>

	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	201c      	movs	r0, #28
 80007dc:	f000 fd43 	bl	8001266 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007e0:	201c      	movs	r0, #28
 80007e2:	f000 fd5c 	bl	800129e <HAL_NVIC_EnableIRQ>

	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 80007e6:	4b23      	ldr	r3, [pc, #140]	; (8000874 <TIM2_init+0x12c>)
 80007e8:	2260      	movs	r2, #96	; 0x60
 80007ea:	601a      	str	r2, [r3, #0]
	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 80007ec:	4b21      	ldr	r3, [pc, #132]	; (8000874 <TIM2_init+0x12c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
	tim2OC1.Pulse        = cc1;
 80007f2:	4a20      	ldr	r2, [pc, #128]	; (8000874 <TIM2_init+0x12c>)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	6053      	str	r3, [r2, #4]
	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <TIM2_init+0x12c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 80007fe:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <TIM2_init+0x12c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_ConfigChannel(&Tim2Handle, &tim2OC1, TIM_CHANNEL_1);
 8000804:	2200      	movs	r2, #0
 8000806:	491b      	ldr	r1, [pc, #108]	; (8000874 <TIM2_init+0x12c>)
 8000808:	4819      	ldr	r0, [pc, #100]	; (8000870 <TIM2_init+0x128>)
 800080a:	f001 ff23 	bl	8002654 <HAL_TIM_PWM_ConfigChannel>



	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <TIM2_init+0x130>)
 8000810:	2260      	movs	r2, #96	; 0x60
 8000812:	601a      	str	r2, [r3, #0]
	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8000814:	4b18      	ldr	r3, [pc, #96]	; (8000878 <TIM2_init+0x130>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
	tim2OC2.Pulse        = cc2;
 800081a:	4a17      	ldr	r2, [pc, #92]	; (8000878 <TIM2_init+0x130>)
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	6053      	str	r3, [r2, #4]
	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <TIM2_init+0x130>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <TIM2_init+0x130>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <TIM2_init+0x130>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <TIM2_init+0x130>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
	HAL_TIM_PWM_ConfigChannel(&Tim2Handle, &tim2OC2, TIM_CHANNEL_2);
 8000838:	2204      	movs	r2, #4
 800083a:	490f      	ldr	r1, [pc, #60]	; (8000878 <TIM2_init+0x130>)
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <TIM2_init+0x128>)
 800083e:	f001 ff09 	bl	8002654 <HAL_TIM_PWM_ConfigChannel>

	HAL_TIM_Base_Start(&Tim2Handle);
 8000842:	480b      	ldr	r0, [pc, #44]	; (8000870 <TIM2_init+0x128>)
 8000844:	f001 fcba 	bl	80021bc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&Tim2Handle, TIM_CHANNEL_1);
 8000848:	2100      	movs	r1, #0
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <TIM2_init+0x128>)
 800084c:	f001 fd58 	bl	8002300 <HAL_TIM_PWM_Start>

}
 8000850:	bf00      	nop
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021000 	.word	0x40021000
 800085c:	20000000 	.word	0x20000000
 8000860:	014f8b59 	.word	0x014f8b59
 8000864:	20000230 	.word	0x20000230
 8000868:	38e38e39 	.word	0x38e38e39
 800086c:	88888889 	.word	0x88888889
 8000870:	20000278 	.word	0x20000278
 8000874:	20000214 	.word	0x20000214
 8000878:	200001b4 	.word	0x200001b4

0800087c <DMA_init>:
DMA_HandleTypeDef     dmaCC1;
DMA_HandleTypeDef     dmaCC2;
#define BUFFER_SIZE		(sizeof(ws2812bDmaBitBuffer)/sizeof(uint16_t))

static void DMA_init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

	// TIM2 Update event
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000882:	4b45      	ldr	r3, [pc, #276]	; (8000998 <DMA_init+0x11c>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a44      	ldr	r2, [pc, #272]	; (8000998 <DMA_init+0x11c>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b42      	ldr	r3, [pc, #264]	; (8000998 <DMA_init+0x11c>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800089a:	4b40      	ldr	r3, [pc, #256]	; (800099c <DMA_init+0x120>)
 800089c:	2210      	movs	r2, #16
 800089e:	605a      	str	r2, [r3, #4]
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a0:	4b3e      	ldr	r3, [pc, #248]	; (800099c <DMA_init+0x120>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 80008a6:	4b3d      	ldr	r3, [pc, #244]	; (800099c <DMA_init+0x120>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008ac:	4b3b      	ldr	r3, [pc, #236]	; (800099c <DMA_init+0x120>)
 80008ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b2:	611a      	str	r2, [r3, #16]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008b4:	4b39      	ldr	r3, [pc, #228]	; (800099c <DMA_init+0x120>)
 80008b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008ba:	615a      	str	r2, [r3, #20]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 80008bc:	4b37      	ldr	r3, [pc, #220]	; (800099c <DMA_init+0x120>)
 80008be:	2220      	movs	r2, #32
 80008c0:	619a      	str	r2, [r3, #24]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80008c2:	4b36      	ldr	r3, [pc, #216]	; (800099c <DMA_init+0x120>)
 80008c4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80008c8:	61da      	str	r2, [r3, #28]
	dmaUpdate.Instance = DMA1_Channel2;
 80008ca:	4b34      	ldr	r3, [pc, #208]	; (800099c <DMA_init+0x120>)
 80008cc:	4a34      	ldr	r2, [pc, #208]	; (80009a0 <DMA_init+0x124>)
 80008ce:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;
	HAL_DMA_Init(&dmaUpdate);
 80008d0:	4832      	ldr	r0, [pc, #200]	; (800099c <DMA_init+0x120>)
 80008d2:	f000 fcff 	bl	80012d4 <HAL_DMA_Init>
	//HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 80008d6:	4933      	ldr	r1, [pc, #204]	; (80009a4 <DMA_init+0x128>)
 80008d8:	2330      	movs	r3, #48	; 0x30
 80008da:	4a33      	ldr	r2, [pc, #204]	; (80009a8 <DMA_init+0x12c>)
 80008dc:	482f      	ldr	r0, [pc, #188]	; (800099c <DMA_init+0x120>)
 80008de:	f000 fd53 	bl	8001388 <HAL_DMA_Start>


	// TIM2 CC1 event
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008e2:	4b32      	ldr	r3, [pc, #200]	; (80009ac <DMA_init+0x130>)
 80008e4:	2210      	movs	r2, #16
 80008e6:	605a      	str	r2, [r3, #4]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <DMA_init+0x130>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 80008ee:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <DMA_init+0x130>)
 80008f0:	2280      	movs	r2, #128	; 0x80
 80008f2:	60da      	str	r2, [r3, #12]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <DMA_init+0x130>)
 80008f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fa:	611a      	str	r2, [r3, #16]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008fc:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <DMA_init+0x130>)
 80008fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000902:	615a      	str	r2, [r3, #20]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 8000904:	4b29      	ldr	r3, [pc, #164]	; (80009ac <DMA_init+0x130>)
 8000906:	2220      	movs	r2, #32
 8000908:	619a      	str	r2, [r3, #24]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800090a:	4b28      	ldr	r3, [pc, #160]	; (80009ac <DMA_init+0x130>)
 800090c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000910:	61da      	str	r2, [r3, #28]
	dmaCC1.Instance = DMA1_Channel5;
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <DMA_init+0x130>)
 8000914:	4a26      	ldr	r2, [pc, #152]	; (80009b0 <DMA_init+0x134>)
 8000916:	601a      	str	r2, [r3, #0]
	//dmaUpdate.XferCpltCallback  = TransferComplete;
	//dmaUpdate.XferErrorCallback = TransferError;
	//dmaUpdate.XferHalfCpltCallback = TransferHalf;
	//HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
	//HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
	HAL_DMA_Init(&dmaCC1);
 8000918:	4824      	ldr	r0, [pc, #144]	; (80009ac <DMA_init+0x130>)
 800091a:	f000 fcdb 	bl	80012d4 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&WS2812B_PORT->BRR, BUFFER_SIZE);
 800091e:	4925      	ldr	r1, [pc, #148]	; (80009b4 <DMA_init+0x138>)
 8000920:	2330      	movs	r3, #48	; 0x30
 8000922:	4a25      	ldr	r2, [pc, #148]	; (80009b8 <DMA_init+0x13c>)
 8000924:	4821      	ldr	r0, [pc, #132]	; (80009ac <DMA_init+0x130>)
 8000926:	f000 fd2f 	bl	8001388 <HAL_DMA_Start>


	// TIM2 CC2 event
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800092a:	4b24      	ldr	r3, [pc, #144]	; (80009bc <DMA_init+0x140>)
 800092c:	2210      	movs	r2, #16
 800092e:	605a      	str	r2, [r3, #4]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000930:	4b22      	ldr	r3, [pc, #136]	; (80009bc <DMA_init+0x140>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <DMA_init+0x140>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <DMA_init+0x140>)
 800093e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000942:	611a      	str	r2, [r3, #16]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <DMA_init+0x140>)
 8000946:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800094a:	615a      	str	r2, [r3, #20]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <DMA_init+0x140>)
 800094e:	2220      	movs	r2, #32
 8000950:	619a      	str	r2, [r3, #24]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <DMA_init+0x140>)
 8000954:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000958:	61da      	str	r2, [r3, #28]
	dmaCC2.Instance = DMA1_Channel7;
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <DMA_init+0x140>)
 800095c:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <DMA_init+0x144>)
 800095e:	601a      	str	r2, [r3, #0]

	// DMA_INIT clears the callbacks, call it first
	HAL_DMA_Init(&dmaCC2);
 8000960:	4816      	ldr	r0, [pc, #88]	; (80009bc <DMA_init+0x140>)
 8000962:	f000 fcb7 	bl	80012d4 <HAL_DMA_Init>

	// Then set the callbacks
	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <DMA_init+0x140>)
 8000968:	4a16      	ldr	r2, [pc, #88]	; (80009c4 <DMA_init+0x148>)
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <DMA_init+0x140>)
 800096e:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <DMA_init+0x14c>)
 8000970:	62da      	str	r2, [r3, #44]	; 0x2c
	//dmaUpdate.XferErrorCallback = TransferError;

	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	2011      	movs	r0, #17
 8000978:	f000 fc75 	bl	8001266 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800097c:	2011      	movs	r0, #17
 800097e:	f000 fc8e 	bl	800129e <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 8000982:	4912      	ldr	r1, [pc, #72]	; (80009cc <DMA_init+0x150>)
 8000984:	2330      	movs	r3, #48	; 0x30
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <DMA_init+0x12c>)
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <DMA_init+0x140>)
 800098a:	f000 fd3f 	bl	800140c <HAL_DMA_Start_IT>

}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000
 800099c:	20000320 	.word	0x20000320
 80009a0:	4002001c 	.word	0x4002001c
 80009a4:	20000004 	.word	0x20000004
 80009a8:	40010810 	.word	0x40010810
 80009ac:	20000234 	.word	0x20000234
 80009b0:	40020058 	.word	0x40020058
 80009b4:	200002c0 	.word	0x200002c0
 80009b8:	40010814 	.word	0x40010814
 80009bc:	200001d0 	.word	0x200001d0
 80009c0:	40020080 	.word	0x40020080
 80009c4:	08000c11 	.word	0x08000c11
 80009c8:	08000bad 	.word	0x08000bad
 80009cc:	20000008 	.word	0x20000008

080009d0 <DMA1_Channel2_IRQHandler>:


void DMA1_Channel2_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  // Check the interrupt and clear flag
  HAL_DMA_IRQHandler(&dmaUpdate);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <DMA1_Channel2_IRQHandler+0x10>)
 80009d6:	f000 fd79 	bl	80014cc <HAL_DMA_IRQHandler>
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000320 	.word	0x20000320

080009e4 <DMA1_Channel5_IRQHandler>:

void DMA1_Channel5_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  // Check the interrupt and clear flag
  HAL_DMA_IRQHandler(&dmaCC1);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <DMA1_Channel5_IRQHandler+0x10>)
 80009ea:	f000 fd6f 	bl	80014cc <HAL_DMA_IRQHandler>
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000234 	.word	0x20000234

080009f8 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  // Check the interrupt and clear flag
  HAL_DMA_IRQHandler(&dmaCC2);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <DMA1_Channel7_IRQHandler+0x10>)
 80009fe:	f000 fd65 	bl	80014cc <HAL_DMA_IRQHandler>
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200001d0 	.word	0x200001d0

08000a0c <loadNextFramebufferData>:



static void loadNextFramebufferData(WS2812_BufferItem *bItem, uint32_t row)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b089      	sub	sp, #36	; 0x24
 8000a10:	af02      	add	r7, sp, #8
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]

	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	1c58      	adds	r0, r3, #1
 8000a20:	6879      	ldr	r1, [r7, #4]
 8000a22:	6088      	str	r0, [r1, #8]
 8000a24:	4413      	add	r3, r2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	617b      	str	r3, [r7, #20]
	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	1c58      	adds	r0, r3, #1
 8000a34:	6879      	ldr	r1, [r7, #4]
 8000a36:	6088      	str	r0, [r1, #8]
 8000a38:	4413      	add	r3, r2
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	613b      	str	r3, [r7, #16]
	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	1c58      	adds	r0, r3, #1
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	6088      	str	r0, [r1, #8]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]

	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d102      	bne.n	8000a64 <loadNextFramebufferData+0x58>
		bItem->frameBufferCounter = 0;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]

	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7b18      	ldrb	r0, [r3, #12]
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b299      	uxth	r1, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	b2dc      	uxtb	r4, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	4623      	mov	r3, r4
 8000a7c:	f000 f98e 	bl	8000d9c <ws2812b_set_pixel>
}
 8000a80:	bf00      	nop
 8000a82:	371c      	adds	r7, #28
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd90      	pop	{r4, r7, pc}

08000a88 <WS2812_sendbuf>:


// Transmit the framebuffer
static void WS2812_sendbuf()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
	// transmission complete flag
	ws2812b.transferComplete = 0;
 8000a8e:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <WS2812_sendbuf+0x108>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	741a      	strb	r2, [r3, #16]

	uint32_t i;

	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	e019      	b.n	8000ace <WS2812_sendbuf+0x46>
	{
		ws2812b.item[i].frameBufferCounter = 0;
 8000a9a:	4a3d      	ldr	r2, [pc, #244]	; (8000b90 <WS2812_sendbuf+0x108>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	011b      	lsls	r3, r3, #4
 8000aa0:	4413      	add	r3, r2
 8000aa2:	3308      	adds	r3, #8
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]

		loadNextFramebufferData(&ws2812b.item[i], 0); // ROW 0
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	011b      	lsls	r3, r3, #4
 8000aac:	4a38      	ldr	r2, [pc, #224]	; (8000b90 <WS2812_sendbuf+0x108>)
 8000aae:	4413      	add	r3, r2
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ffaa 	bl	8000a0c <loadNextFramebufferData>
		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	011b      	lsls	r3, r3, #4
 8000abc:	4a34      	ldr	r2, [pc, #208]	; (8000b90 <WS2812_sendbuf+0x108>)
 8000abe:	4413      	add	r3, r2
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ffa2 	bl	8000a0c <loadNextFramebufferData>
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3301      	adds	r3, #1
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d0e2      	beq.n	8000a9a <WS2812_sendbuf+0x12>
	}

	// clear all DMA flags
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TC2 | DMA_FLAG_HT2 | DMA_FLAG_TE2);
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <WS2812_sendbuf+0x10c>)
 8000ad6:	22e0      	movs	r2, #224	; 0xe0
 8000ad8:	605a      	str	r2, [r3, #4]
	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TC5 | DMA_FLAG_HT5 | DMA_FLAG_TE5);
 8000ada:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <WS2812_sendbuf+0x10c>)
 8000adc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ae0:	605a      	str	r2, [r3, #4]
	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TC7 | DMA_FLAG_HT7 | DMA_FLAG_TE7);
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <WS2812_sendbuf+0x10c>)
 8000ae4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000ae8:	605a      	str	r2, [r3, #4]

	// configure the number of bytes to be transferred by the DMA controller
	dmaUpdate.Instance->CNDTR = BUFFER_SIZE;
 8000aea:	4b2b      	ldr	r3, [pc, #172]	; (8000b98 <WS2812_sendbuf+0x110>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2230      	movs	r2, #48	; 0x30
 8000af0:	605a      	str	r2, [r3, #4]
	dmaCC1.Instance->CNDTR = BUFFER_SIZE;
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <WS2812_sendbuf+0x114>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2230      	movs	r2, #48	; 0x30
 8000af8:	605a      	str	r2, [r3, #4]
	dmaCC2.Instance->CNDTR = BUFFER_SIZE;
 8000afa:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <WS2812_sendbuf+0x118>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2230      	movs	r2, #48	; 0x30
 8000b00:	605a      	str	r2, [r3, #4]

	// clear all TIM2 flags
	__HAL_TIM_CLEAR_FLAG(&Tim2Handle, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | TIM_FLAG_CC4);
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <WS2812_sendbuf+0x11c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f06f 021f 	mvn.w	r2, #31
 8000b0a:	611a      	str	r2, [r3, #16]

	// enable DMA channels
	__HAL_DMA_ENABLE(&dmaUpdate);
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <WS2812_sendbuf+0x110>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <WS2812_sendbuf+0x110>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f042 0201 	orr.w	r2, r2, #1
 8000b1a:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC1);
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <WS2812_sendbuf+0x114>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <WS2812_sendbuf+0x114>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f042 0201 	orr.w	r2, r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC2);
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <WS2812_sendbuf+0x118>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <WS2812_sendbuf+0x118>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f042 0201 	orr.w	r2, r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]

	// IMPORTANT: enable the TIM2 DMA requests AFTER enabling the DMA channels!
	__HAL_TIM_ENABLE_DMA(&Tim2Handle, TIM_DMA_UPDATE);
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <WS2812_sendbuf+0x11c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <WS2812_sendbuf+0x11c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b4a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&Tim2Handle, TIM_DMA_CC1);
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <WS2812_sendbuf+0x11c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	68da      	ldr	r2, [r3, #12]
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <WS2812_sendbuf+0x11c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b5a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&Tim2Handle, TIM_DMA_CC2);
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <WS2812_sendbuf+0x11c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	68da      	ldr	r2, [r3, #12]
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <WS2812_sendbuf+0x11c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b6a:	60da      	str	r2, [r3, #12]

	TIM2->CNT = tim_period-1;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <WS2812_sendbuf+0x120>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b74:	3b01      	subs	r3, #1
 8000b76:	6253      	str	r3, [r2, #36]	; 0x24

	// start TIM2
	__HAL_TIM_ENABLE(&Tim2Handle);
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <WS2812_sendbuf+0x11c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <WS2812_sendbuf+0x11c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f042 0201 	orr.w	r2, r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200000e4 	.word	0x200000e4
 8000b94:	40020000 	.word	0x40020000
 8000b98:	20000320 	.word	0x20000320
 8000b9c:	20000234 	.word	0x20000234
 8000ba0:	200001d0 	.word	0x200001d0
 8000ba4:	20000278 	.word	0x20000278
 8000ba8:	20000230 	.word	0x20000230

08000bac <DMA_TransferHalfHandler>:




void DMA_TransferHalfHandler(DMA_HandleTypeDef *DmaHandle)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af02      	add	r7, sp, #8
 8000bb2:	6078      	str	r0, [r7, #4]
	#if defined(LED4_PORT)
		LED4_PORT->BSRR = LED4_PIN;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <DMA_TransferHalfHandler+0x5c>)
 8000bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bba:	611a      	str	r2, [r3, #16]
	#endif

	// Is this the last LED?
	if(ws2812b.repeatCounter != (WS2812B_NUMBER_OF_LEDS / 2 - 1))
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <DMA_TransferHalfHandler+0x60>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	2b0e      	cmp	r3, #14
 8000bc2:	d011      	beq.n	8000be8 <DMA_TransferHalfHandler+0x3c>
	{
		uint32_t i;

		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	e00a      	b.n	8000be0 <DMA_TransferHalfHandler+0x34>
		{
			loadNextFramebufferData(&ws2812b.item[i], 0);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	011b      	lsls	r3, r3, #4
 8000bce:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <DMA_TransferHalfHandler+0x60>)
 8000bd0:	4413      	add	r3, r2
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff19 	bl	8000a0c <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d0f1      	beq.n	8000bca <DMA_TransferHalfHandler+0x1e>
 8000be6:	e007      	b.n	8000bf8 <DMA_TransferHalfHandler+0x4c>
		}

	} else {
		// If this is the last pixel, set the next pixel value to zeros, because
		// the DMA would not stop exactly at the last bit.
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 8000be8:	2300      	movs	r3, #0
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	2300      	movs	r3, #0
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 f8d2 	bl	8000d9c <ws2812b_set_pixel>
	}

	#if defined(LED4_PORT)
		LED4_PORT->BRR = LED4_PIN;
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <DMA_TransferHalfHandler+0x5c>)
 8000bfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfe:	615a      	str	r2, [r3, #20]
	#endif
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40011000 	.word	0x40011000
 8000c0c:	200000e4 	.word	0x200000e4

08000c10 <DMA_TransferCompleteHandler>:

void DMA_TransferCompleteHandler(DMA_HandleTypeDef *DmaHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	#if defined(LED5_PORT)
		LED5_PORT->BSRR = LED5_PIN;
 8000c18:	4b32      	ldr	r3, [pc, #200]	; (8000ce4 <DMA_TransferCompleteHandler+0xd4>)
 8000c1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c1e:	611a      	str	r2, [r3, #16]
	#endif

	ws2812b.repeatCounter++;
 8000c20:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <DMA_TransferCompleteHandler+0xd8>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	3301      	adds	r3, #1
 8000c26:	4a30      	ldr	r2, [pc, #192]	; (8000ce8 <DMA_TransferCompleteHandler+0xd8>)
 8000c28:	6193      	str	r3, [r2, #24]

	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS / 2)
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <DMA_TransferCompleteHandler+0xd8>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	2b0f      	cmp	r3, #15
 8000c30:	d13f      	bne.n	8000cb2 <DMA_TransferCompleteHandler+0xa2>
	{
		// Transfer of all LEDs is done, disable DMA but enable tiemr update IRQ to stop the 50us pulse
		ws2812b.repeatCounter = 0;
 8000c32:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <DMA_TransferCompleteHandler+0xd8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]

		// Enable TIM2 Update interrupt for 50us Treset signal
		__HAL_TIM_ENABLE_IT(&Tim2Handle, TIM_IT_UPDATE);
 8000c38:	4b2c      	ldr	r3, [pc, #176]	; (8000cec <DMA_TransferCompleteHandler+0xdc>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	4b2b      	ldr	r3, [pc, #172]	; (8000cec <DMA_TransferCompleteHandler+0xdc>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f042 0201 	orr.w	r2, r2, #1
 8000c46:	60da      	str	r2, [r3, #12]
		// Disable DMA
		__HAL_DMA_DISABLE(&dmaUpdate);
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <DMA_TransferCompleteHandler+0xe0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <DMA_TransferCompleteHandler+0xe0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0201 	bic.w	r2, r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC1);
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <DMA_TransferCompleteHandler+0xe4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <DMA_TransferCompleteHandler+0xe4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f022 0201 	bic.w	r2, r2, #1
 8000c66:	601a      	str	r2, [r3, #0]
		__HAL_DMA_DISABLE(&dmaCC2);
 8000c68:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <DMA_TransferCompleteHandler+0xe8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <DMA_TransferCompleteHandler+0xe8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f022 0201 	bic.w	r2, r2, #1
 8000c76:	601a      	str	r2, [r3, #0]

		// Disable the DMA requests
		__HAL_TIM_DISABLE_DMA(&Tim2Handle, TIM_DMA_UPDATE);
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <DMA_TransferCompleteHandler+0xdc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68da      	ldr	r2, [r3, #12]
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <DMA_TransferCompleteHandler+0xdc>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c86:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&Tim2Handle, TIM_DMA_CC1);
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <DMA_TransferCompleteHandler+0xdc>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	68da      	ldr	r2, [r3, #12]
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <DMA_TransferCompleteHandler+0xdc>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c96:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&Tim2Handle, TIM_DMA_CC2);
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <DMA_TransferCompleteHandler+0xdc>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <DMA_TransferCompleteHandler+0xdc>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ca6:	60da      	str	r2, [r3, #12]

		// Manually set outputs to low to generate 50us reset impulse
		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <DMA_TransferCompleteHandler+0xec>)
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <DMA_TransferCompleteHandler+0xf0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6113      	str	r3, [r2, #16]
 8000cb0:	e010      	b.n	8000cd4 <DMA_TransferCompleteHandler+0xc4>
	} else {

		// Load bitbuffer with next RGB LED values
		uint32_t i;
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	e00a      	b.n	8000cce <DMA_TransferCompleteHandler+0xbe>
		{
			loadNextFramebufferData(&ws2812b.item[i], 1);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <DMA_TransferCompleteHandler+0xd8>)
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fea2 	bl	8000a0c <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0f1      	beq.n	8000cb8 <DMA_TransferCompleteHandler+0xa8>
		}

	}

	#if defined(LED5_PORT)
		LED5_PORT->BRR = LED5_PIN;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <DMA_TransferCompleteHandler+0xd4>)
 8000cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cda:	615a      	str	r2, [r3, #20]
	#endif
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40011000 	.word	0x40011000
 8000ce8:	200000e4 	.word	0x200000e4
 8000cec:	20000278 	.word	0x20000278
 8000cf0:	20000320 	.word	0x20000320
 8000cf4:	20000234 	.word	0x20000234
 8000cf8:	200001d0 	.word	0x200001d0
 8000cfc:	40010800 	.word	0x40010800
 8000d00:	20000008 	.word	0x20000008

08000d04 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&Tim2Handle);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <TIM2_IRQHandler+0x10>)
 8000d0a:	f001 fb9b 	bl	8002444 <HAL_TIM_IRQHandler>
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000278 	.word	0x20000278

08000d18 <HAL_TIM_PeriodElapsedCallback>:

// TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	// I have to wait 50us to generate Treset signal
	if (ws2812b.timerPeriodCounter < (uint8_t)WS2812_RESET_PERIOD)
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	2b0b      	cmp	r3, #11
 8000d26:	d805      	bhi.n	8000d34 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		// count the number of timer periods
		ws2812b.timerPeriodCounter++;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d2a:	695b      	ldr	r3, [r3, #20]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d30:	6153      	str	r3, [r2, #20]
		__HAL_TIM_DISABLE_IT(&Tim2Handle, TIM_IT_UPDATE);
		// set TransferComplete flag
		ws2812b.transferComplete = 1;
	}

}
 8000d32:	e029      	b.n	8000d88 <HAL_TIM_PeriodElapsedCallback+0x70>
		ws2812b.timerPeriodCounter = 0;
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]
		__HAL_TIM_DISABLE(&Tim2Handle);
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6a1a      	ldr	r2, [r3, #32]
 8000d40:	f241 1311 	movw	r3, #4369	; 0x1111
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10f      	bne.n	8000d6a <HAL_TIM_PeriodElapsedCallback+0x52>
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	6a1a      	ldr	r2, [r3, #32]
 8000d50:	f240 4344 	movw	r3, #1092	; 0x444
 8000d54:	4013      	ands	r3, r2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d107      	bne.n	8000d6a <HAL_TIM_PeriodElapsedCallback+0x52>
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 0201 	bic.w	r2, r2, #1
 8000d68:	601a      	str	r2, [r3, #0]
		TIM2->CR1 = 0; // disable timer
 8000d6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
		__HAL_TIM_DISABLE_IT(&Tim2Handle, TIM_IT_UPDATE);
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f022 0201 	bic.w	r2, r2, #1
 8000d80:	60da      	str	r2, [r3, #12]
		ws2812b.transferComplete = 1;
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	741a      	strb	r2, [r3, #16]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	200000e4 	.word	0x200000e4
 8000d98:	20000278 	.word	0x20000278

08000d9c <ws2812b_set_pixel>:



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 8000d9c:	b490      	push	{r4, r7}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4604      	mov	r4, r0
 8000da4:	4608      	mov	r0, r1
 8000da6:	4611      	mov	r1, r2
 8000da8:	461a      	mov	r2, r3
 8000daa:	4623      	mov	r3, r4
 8000dac:	71fb      	strb	r3, [r7, #7]
 8000dae:	4603      	mov	r3, r0
 8000db0:	80bb      	strh	r3, [r7, #4]
 8000db2:	460b      	mov	r3, r1
 8000db4:	71bb      	strb	r3, [r7, #6]
 8000db6:	4613      	mov	r3, r2
 8000db8:	70fb      	strb	r3, [r7, #3]

	// Apply gamma
	red = gammaTable[red];
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	4a68      	ldr	r2, [pc, #416]	; (8000f60 <ws2812b_set_pixel+0x1c4>)
 8000dbe:	5cd3      	ldrb	r3, [r2, r3]
 8000dc0:	71bb      	strb	r3, [r7, #6]
	green = gammaTable[green];
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	4a66      	ldr	r2, [pc, #408]	; (8000f60 <ws2812b_set_pixel+0x1c4>)
 8000dc6:	5cd3      	ldrb	r3, [r2, r3]
 8000dc8:	70fb      	strb	r3, [r7, #3]
	blue = gammaTable[blue];
 8000dca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000dce:	4a64      	ldr	r2, [pc, #400]	; (8000f60 <ws2812b_set_pixel+0x1c4>)
 8000dd0:	5cd3      	ldrb	r3, [r2, r3]
 8000dd2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28


	uint32_t calcCol = (column*24);
 8000dd6:	88ba      	ldrh	r2, [r7, #4]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	61fb      	str	r3, [r7, #28]
	uint32_t invRed = ~red;
 8000de2:	79bb      	ldrb	r3, [r7, #6]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	61bb      	str	r3, [r7, #24]
	uint32_t invGreen = ~green;
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	617b      	str	r3, [r7, #20]
	uint32_t invBlue = ~blue;
 8000dee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000df2:	43db      	mvns	r3, r3
 8000df4:	613b      	str	r3, [r7, #16]
	ws2812bDmaBitBuffer[(calcCol+8+7)] |= (((((invRed)<<7) & 0x80)>>7)<<row);
	ws2812bDmaBitBuffer[(calcCol+16+7)] |= (((((invBlue)<<7) & 0x80)>>7)<<row);
#elif defined(SETPIX_4)

	// Bitband optimizations with pure increments, 5us interrupts
	uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[(calcCol)], row);
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	4a5a      	ldr	r2, [pc, #360]	; (8000f64 <ws2812b_set_pixel+0x1c8>)
 8000dfc:	4413      	add	r3, r2
 8000dfe:	f103 7388 	add.w	r3, r3, #17825792	; 0x1100000
 8000e02:	015b      	lsls	r3, r3, #5
 8000e04:	79fa      	ldrb	r2, [r7, #7]
 8000e06:	0092      	lsls	r2, r2, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]

	*bitBand =  (invGreen >> 7);
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	09da      	lsrs	r2, r3, #7
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	3340      	adds	r3, #64	; 0x40
 8000e18:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 6);
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	099a      	lsrs	r2, r3, #6
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	3340      	adds	r3, #64	; 0x40
 8000e26:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 5);
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	095a      	lsrs	r2, r3, #5
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3340      	adds	r3, #64	; 0x40
 8000e34:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 4);
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	091a      	lsrs	r2, r3, #4
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	3340      	adds	r3, #64	; 0x40
 8000e42:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 3);
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3340      	adds	r3, #64	; 0x40
 8000e50:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 2);
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	089a      	lsrs	r2, r3, #2
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3340      	adds	r3, #64	; 0x40
 8000e5e:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 1);
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	085a      	lsrs	r2, r3, #1
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	3340      	adds	r3, #64	; 0x40
 8000e6c:	60fb      	str	r3, [r7, #12]

	*bitBand = (invGreen >> 0);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	3340      	adds	r3, #64	; 0x40
 8000e78:	60fb      	str	r3, [r7, #12]

	// RED
	*bitBand =  (invRed >> 7);
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	09da      	lsrs	r2, r3, #7
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	3340      	adds	r3, #64	; 0x40
 8000e86:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 6);
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	099a      	lsrs	r2, r3, #6
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	3340      	adds	r3, #64	; 0x40
 8000e94:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 5);
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	095a      	lsrs	r2, r3, #5
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3340      	adds	r3, #64	; 0x40
 8000ea2:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 4);
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	091a      	lsrs	r2, r3, #4
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	3340      	adds	r3, #64	; 0x40
 8000eb0:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 3);
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3340      	adds	r3, #64	; 0x40
 8000ebe:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 2);
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	089a      	lsrs	r2, r3, #2
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3340      	adds	r3, #64	; 0x40
 8000ecc:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 1);
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	085a      	lsrs	r2, r3, #1
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	3340      	adds	r3, #64	; 0x40
 8000eda:	60fb      	str	r3, [r7, #12]

	*bitBand = (invRed >> 0);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	3340      	adds	r3, #64	; 0x40
 8000ee6:	60fb      	str	r3, [r7, #12]

	// BLUE
	*bitBand =  (invBlue >> 7);
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	09da      	lsrs	r2, r3, #7
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3340      	adds	r3, #64	; 0x40
 8000ef4:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 6);
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	099a      	lsrs	r2, r3, #6
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3340      	adds	r3, #64	; 0x40
 8000f02:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 5);
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	095a      	lsrs	r2, r3, #5
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	3340      	adds	r3, #64	; 0x40
 8000f10:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 4);
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	091a      	lsrs	r2, r3, #4
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	3340      	adds	r3, #64	; 0x40
 8000f1e:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 3);
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	3340      	adds	r3, #64	; 0x40
 8000f2c:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 2);
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	089a      	lsrs	r2, r3, #2
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3340      	adds	r3, #64	; 0x40
 8000f3a:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 1);
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	085a      	lsrs	r2, r3, #1
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3340      	adds	r3, #64	; 0x40
 8000f48:	60fb      	str	r3, [r7, #12]

	*bitBand = (invBlue >> 0);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	601a      	str	r2, [r3, #0]
	bitBand+=16;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3340      	adds	r3, #64	; 0x40
 8000f54:	60fb      	str	r3, [r7, #12]
    ws2812bDmaBitBuffer[5] = cur5;
    ws2812bDmaBitBuffer[6] = cur6;
    ws2812bDmaBitBuffer[7] = cur7;

#endif
}
 8000f56:	bf00      	nop
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc90      	pop	{r4, r7}
 8000f5e:	4770      	bx	lr
 8000f60:	08002e48 	.word	0x08002e48
 8000f64:	200002c0 	.word	0x200002c0

08000f68 <ws2812b_init>:


void ws2812b_init()
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0

	ws2812b_gpio_init();
 8000f6c:	f7ff fbac 	bl	80006c8 <ws2812b_gpio_init>
	//void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue);
	DMA_init();
 8000f70:	f7ff fc84 	bl	800087c <DMA_init>
	TIM2_init();
 8000f74:	f7ff fbe8 	bl	8000748 <TIM2_init>
	// Need to start the first transfer
	ws2812b.transferComplete = 1;
 8000f78:	4b02      	ldr	r3, [pc, #8]	; (8000f84 <ws2812b_init+0x1c>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	741a      	strb	r2, [r3, #16]
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200000e4 	.word	0x200000e4

08000f88 <ws2812b_handle>:


void ws2812b_handle()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	if(ws2812b.startTransfer) {
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <ws2812b_handle+0x1c>)
 8000f8e:	7c5b      	ldrb	r3, [r3, #17]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d004      	beq.n	8000f9e <ws2812b_handle+0x16>
		ws2812b.startTransfer = 0;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <ws2812b_handle+0x1c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	745a      	strb	r2, [r3, #17]
		WS2812_sendbuf();
 8000f9a:	f7ff fd75 	bl	8000a88 <WS2812_sendbuf>
	}

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200000e4 	.word	0x200000e4

08000fa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fa8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000faa:	e003      	b.n	8000fb4 <LoopCopyDataInit>

08000fac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000fae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fb2:	3104      	adds	r1, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fb4:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000fb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fbc:	d3f6      	bcc.n	8000fac <CopyDataInit>
  ldr r2, =_sbss
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000fc0:	e002      	b.n	8000fc8 <LoopFillZerobss>

08000fc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fc4:	f842 3b04 	str.w	r3, [r2], #4

08000fc8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000fca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fcc:	d3f9      	bcc.n	8000fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fce:	f7ff f9b9 	bl	8000344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f001 fe47 	bl	8002c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fd6:	f7ff f8b9 	bl	800014c <main>
  bx lr
 8000fda:	4770      	bx	lr
  ldr r3, =_sidata
 8000fdc:	08002f50 	.word	0x08002f50
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fe4:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8000fe8:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8000fec:	2000036c 	.word	0x2000036c

08000ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC1_2_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_Init+0x28>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <HAL_Init+0x28>)
 8000ffe:	f043 0310 	orr.w	r3, r3, #16
 8001002:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f923 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100a:	2000      	movs	r0, #0
 800100c:	f000 f808 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001010:	f7ff f908 	bl	8000224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40022000 	.word	0x40022000

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x54>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x58>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f93b 	bl	80012ba <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e00e      	b.n	800106c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d80a      	bhi.n	800106a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f000 f903 	bl	8001266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <HAL_InitTick+0x5c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000000 	.word	0x20000000
 8001078:	20000010 	.word	0x20000010
 800107c:	2000000c 	.word	0x2000000c

08001080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_IncTick+0x1c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x20>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <HAL_IncTick+0x20>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	20000010 	.word	0x20000010
 80010a0:	20000364 	.word	0x20000364

080010a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b02      	ldr	r3, [pc, #8]	; (80010b4 <HAL_GetTick+0x10>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	20000364 	.word	0x20000364

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4906      	ldr	r1, [pc, #24]	; (8001150 <__NVIC_EnableIRQ+0x34>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800121c:	d301      	bcc.n	8001222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121e:	2301      	movs	r3, #1
 8001220:	e00f      	b.n	8001242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <SysTick_Config+0x40>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122a:	210f      	movs	r1, #15
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f7ff ff90 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <SysTick_Config+0x40>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <SysTick_Config+0x40>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff2d 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001278:	f7ff ff42 	bl	8001100 <__NVIC_GetPriorityGrouping>
 800127c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff ff90 	bl	80011a8 <NVIC_EncodePriority>
 8001288:	4602      	mov	r2, r0
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff5f 	bl	8001154 <__NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff35 	bl	800111c <__NVIC_EnableIRQ>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffa2 	bl	800120c <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e043      	b.n	8001372 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <HAL_DMA_Init+0xa8>)
 80012f2:	4413      	add	r3, r2
 80012f4:	4a22      	ldr	r2, [pc, #136]	; (8001380 <HAL_DMA_Init+0xac>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	009a      	lsls	r2, r3, #2
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a1f      	ldr	r2, [pc, #124]	; (8001384 <HAL_DMA_Init+0xb0>)
 8001306:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2202      	movs	r2, #2
 800130c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800131e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001322:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800132c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	bffdfff8 	.word	0xbffdfff8
 8001380:	cccccccd 	.word	0xcccccccd
 8001384:	40020000 	.word	0x40020000

08001388 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <HAL_DMA_Start+0x20>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e02d      	b.n	8001404 <HAL_DMA_Start+0x7c>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d11d      	bne.n	80013f6 <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2202      	movs	r2, #2
 80013be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2200      	movs	r2, #0
 80013c6:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0201 	bic.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f000 f97a 	bl	80016d8 <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0201 	orr.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	e005      	b.n	8001402 <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 80013fe:	2302      	movs	r3, #2
 8001400:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 8001402:	7dfb      	ldrb	r3, [r7, #23]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_DMA_Start_IT+0x20>
 8001428:	2302      	movs	r3, #2
 800142a:	e04a      	b.n	80014c2 <HAL_DMA_Start_IT+0xb6>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800143a:	2b01      	cmp	r3, #1
 800143c:	d13a      	bne.n	80014b4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2202      	movs	r2, #2
 8001442:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2200      	movs	r2, #0
 800144a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 f938 	bl	80016d8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 020e 	orr.w	r2, r2, #14
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e00f      	b.n	80014a2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0204 	bic.w	r2, r2, #4
 8001490:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f042 020a 	orr.w	r2, r2, #10
 80014a0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0201 	orr.w	r2, r2, #1
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	e005      	b.n	80014c0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014bc:	2302      	movs	r3, #2
 80014be:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	2204      	movs	r2, #4
 80014ea:	409a      	lsls	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d04f      	beq.n	8001594 <HAL_DMA_IRQHandler+0xc8>
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d04a      	beq.n	8001594 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0320 	and.w	r3, r3, #32
 8001508:	2b00      	cmp	r3, #0
 800150a:	d107      	bne.n	800151c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0204 	bic.w	r2, r2, #4
 800151a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a66      	ldr	r2, [pc, #408]	; (80016bc <HAL_DMA_IRQHandler+0x1f0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d029      	beq.n	800157a <HAL_DMA_IRQHandler+0xae>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a65      	ldr	r2, [pc, #404]	; (80016c0 <HAL_DMA_IRQHandler+0x1f4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d022      	beq.n	8001576 <HAL_DMA_IRQHandler+0xaa>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a63      	ldr	r2, [pc, #396]	; (80016c4 <HAL_DMA_IRQHandler+0x1f8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d01a      	beq.n	8001570 <HAL_DMA_IRQHandler+0xa4>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a62      	ldr	r2, [pc, #392]	; (80016c8 <HAL_DMA_IRQHandler+0x1fc>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d012      	beq.n	800156a <HAL_DMA_IRQHandler+0x9e>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a60      	ldr	r2, [pc, #384]	; (80016cc <HAL_DMA_IRQHandler+0x200>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d00a      	beq.n	8001564 <HAL_DMA_IRQHandler+0x98>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a5f      	ldr	r2, [pc, #380]	; (80016d0 <HAL_DMA_IRQHandler+0x204>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d102      	bne.n	800155e <HAL_DMA_IRQHandler+0x92>
 8001558:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800155c:	e00e      	b.n	800157c <HAL_DMA_IRQHandler+0xb0>
 800155e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001562:	e00b      	b.n	800157c <HAL_DMA_IRQHandler+0xb0>
 8001564:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001568:	e008      	b.n	800157c <HAL_DMA_IRQHandler+0xb0>
 800156a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800156e:	e005      	b.n	800157c <HAL_DMA_IRQHandler+0xb0>
 8001570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001574:	e002      	b.n	800157c <HAL_DMA_IRQHandler+0xb0>
 8001576:	2340      	movs	r3, #64	; 0x40
 8001578:	e000      	b.n	800157c <HAL_DMA_IRQHandler+0xb0>
 800157a:	2304      	movs	r3, #4
 800157c:	4a55      	ldr	r2, [pc, #340]	; (80016d4 <HAL_DMA_IRQHandler+0x208>)
 800157e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 8094 	beq.w	80016b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001592:	e08e      	b.n	80016b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	2202      	movs	r2, #2
 800159a:	409a      	lsls	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4013      	ands	r3, r2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d056      	beq.n	8001652 <HAL_DMA_IRQHandler+0x186>
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d051      	beq.n	8001652 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0320 	and.w	r3, r3, #32
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10b      	bne.n	80015d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 020a 	bic.w	r2, r2, #10
 80015ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a38      	ldr	r2, [pc, #224]	; (80016bc <HAL_DMA_IRQHandler+0x1f0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d029      	beq.n	8001632 <HAL_DMA_IRQHandler+0x166>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a37      	ldr	r2, [pc, #220]	; (80016c0 <HAL_DMA_IRQHandler+0x1f4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d022      	beq.n	800162e <HAL_DMA_IRQHandler+0x162>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a35      	ldr	r2, [pc, #212]	; (80016c4 <HAL_DMA_IRQHandler+0x1f8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d01a      	beq.n	8001628 <HAL_DMA_IRQHandler+0x15c>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a34      	ldr	r2, [pc, #208]	; (80016c8 <HAL_DMA_IRQHandler+0x1fc>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d012      	beq.n	8001622 <HAL_DMA_IRQHandler+0x156>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a32      	ldr	r2, [pc, #200]	; (80016cc <HAL_DMA_IRQHandler+0x200>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d00a      	beq.n	800161c <HAL_DMA_IRQHandler+0x150>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a31      	ldr	r2, [pc, #196]	; (80016d0 <HAL_DMA_IRQHandler+0x204>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d102      	bne.n	8001616 <HAL_DMA_IRQHandler+0x14a>
 8001610:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001614:	e00e      	b.n	8001634 <HAL_DMA_IRQHandler+0x168>
 8001616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800161a:	e00b      	b.n	8001634 <HAL_DMA_IRQHandler+0x168>
 800161c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001620:	e008      	b.n	8001634 <HAL_DMA_IRQHandler+0x168>
 8001622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001626:	e005      	b.n	8001634 <HAL_DMA_IRQHandler+0x168>
 8001628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800162c:	e002      	b.n	8001634 <HAL_DMA_IRQHandler+0x168>
 800162e:	2320      	movs	r3, #32
 8001630:	e000      	b.n	8001634 <HAL_DMA_IRQHandler+0x168>
 8001632:	2302      	movs	r3, #2
 8001634:	4a27      	ldr	r2, [pc, #156]	; (80016d4 <HAL_DMA_IRQHandler+0x208>)
 8001636:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	2b00      	cmp	r3, #0
 8001646:	d034      	beq.n	80016b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001650:	e02f      	b.n	80016b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	2208      	movs	r2, #8
 8001658:	409a      	lsls	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d028      	beq.n	80016b4 <HAL_DMA_IRQHandler+0x1e8>
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	2b00      	cmp	r3, #0
 800166a:	d023      	beq.n	80016b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 020e 	bic.w	r2, r2, #14
 800167a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001684:	2101      	movs	r1, #1
 8001686:	fa01 f202 	lsl.w	r2, r1, r2
 800168a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	4798      	blx	r3
    }
  }
  return;
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
}
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40020008 	.word	0x40020008
 80016c0:	4002001c 	.word	0x4002001c
 80016c4:	40020030 	.word	0x40020030
 80016c8:	40020044 	.word	0x40020044
 80016cc:	40020058 	.word	0x40020058
 80016d0:	4002006c 	.word	0x4002006c
 80016d4:	40020000 	.word	0x40020000

080016d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ee:	2101      	movs	r1, #1
 80016f0:	fa01 f202 	lsl.w	r2, r1, r2
 80016f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b10      	cmp	r3, #16
 8001704:	d108      	bne.n	8001718 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001716:	e007      	b.n	8001728 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	60da      	str	r2, [r3, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
	...

08001734 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001734:	b480      	push	{r7}
 8001736:	b08b      	sub	sp, #44	; 0x2c
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001746:	e127      	b.n	8001998 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001748:	2201      	movs	r2, #1
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	429a      	cmp	r2, r3
 8001762:	f040 8116 	bne.w	8001992 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b12      	cmp	r3, #18
 800176c:	d034      	beq.n	80017d8 <HAL_GPIO_Init+0xa4>
 800176e:	2b12      	cmp	r3, #18
 8001770:	d80d      	bhi.n	800178e <HAL_GPIO_Init+0x5a>
 8001772:	2b02      	cmp	r3, #2
 8001774:	d02b      	beq.n	80017ce <HAL_GPIO_Init+0x9a>
 8001776:	2b02      	cmp	r3, #2
 8001778:	d804      	bhi.n	8001784 <HAL_GPIO_Init+0x50>
 800177a:	2b00      	cmp	r3, #0
 800177c:	d031      	beq.n	80017e2 <HAL_GPIO_Init+0xae>
 800177e:	2b01      	cmp	r3, #1
 8001780:	d01c      	beq.n	80017bc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001782:	e048      	b.n	8001816 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001784:	2b03      	cmp	r3, #3
 8001786:	d043      	beq.n	8001810 <HAL_GPIO_Init+0xdc>
 8001788:	2b11      	cmp	r3, #17
 800178a:	d01b      	beq.n	80017c4 <HAL_GPIO_Init+0x90>
          break;
 800178c:	e043      	b.n	8001816 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800178e:	4a89      	ldr	r2, [pc, #548]	; (80019b4 <HAL_GPIO_Init+0x280>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d026      	beq.n	80017e2 <HAL_GPIO_Init+0xae>
 8001794:	4a87      	ldr	r2, [pc, #540]	; (80019b4 <HAL_GPIO_Init+0x280>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d806      	bhi.n	80017a8 <HAL_GPIO_Init+0x74>
 800179a:	4a87      	ldr	r2, [pc, #540]	; (80019b8 <HAL_GPIO_Init+0x284>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d020      	beq.n	80017e2 <HAL_GPIO_Init+0xae>
 80017a0:	4a86      	ldr	r2, [pc, #536]	; (80019bc <HAL_GPIO_Init+0x288>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d01d      	beq.n	80017e2 <HAL_GPIO_Init+0xae>
          break;
 80017a6:	e036      	b.n	8001816 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017a8:	4a85      	ldr	r2, [pc, #532]	; (80019c0 <HAL_GPIO_Init+0x28c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d019      	beq.n	80017e2 <HAL_GPIO_Init+0xae>
 80017ae:	4a85      	ldr	r2, [pc, #532]	; (80019c4 <HAL_GPIO_Init+0x290>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d016      	beq.n	80017e2 <HAL_GPIO_Init+0xae>
 80017b4:	4a84      	ldr	r2, [pc, #528]	; (80019c8 <HAL_GPIO_Init+0x294>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d013      	beq.n	80017e2 <HAL_GPIO_Init+0xae>
          break;
 80017ba:	e02c      	b.n	8001816 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	623b      	str	r3, [r7, #32]
          break;
 80017c2:	e028      	b.n	8001816 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	3304      	adds	r3, #4
 80017ca:	623b      	str	r3, [r7, #32]
          break;
 80017cc:	e023      	b.n	8001816 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	3308      	adds	r3, #8
 80017d4:	623b      	str	r3, [r7, #32]
          break;
 80017d6:	e01e      	b.n	8001816 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	330c      	adds	r3, #12
 80017de:	623b      	str	r3, [r7, #32]
          break;
 80017e0:	e019      	b.n	8001816 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ea:	2304      	movs	r3, #4
 80017ec:	623b      	str	r3, [r7, #32]
          break;
 80017ee:	e012      	b.n	8001816 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f8:	2308      	movs	r3, #8
 80017fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	611a      	str	r2, [r3, #16]
          break;
 8001802:	e008      	b.n	8001816 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001804:	2308      	movs	r3, #8
 8001806:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	615a      	str	r2, [r3, #20]
          break;
 800180e:	e002      	b.n	8001816 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
          break;
 8001814:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	2bff      	cmp	r3, #255	; 0xff
 800181a:	d801      	bhi.n	8001820 <HAL_GPIO_Init+0xec>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	e001      	b.n	8001824 <HAL_GPIO_Init+0xf0>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3304      	adds	r3, #4
 8001824:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2bff      	cmp	r3, #255	; 0xff
 800182a:	d802      	bhi.n	8001832 <HAL_GPIO_Init+0xfe>
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	e002      	b.n	8001838 <HAL_GPIO_Init+0x104>
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	3b08      	subs	r3, #8
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	210f      	movs	r1, #15
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	401a      	ands	r2, r3
 800184a:	6a39      	ldr	r1, [r7, #32]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	431a      	orrs	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 8096 	beq.w	8001992 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001866:	4b59      	ldr	r3, [pc, #356]	; (80019cc <HAL_GPIO_Init+0x298>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	4a58      	ldr	r2, [pc, #352]	; (80019cc <HAL_GPIO_Init+0x298>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6193      	str	r3, [r2, #24]
 8001872:	4b56      	ldr	r3, [pc, #344]	; (80019cc <HAL_GPIO_Init+0x298>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800187e:	4a54      	ldr	r2, [pc, #336]	; (80019d0 <HAL_GPIO_Init+0x29c>)
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	3302      	adds	r3, #2
 8001886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	220f      	movs	r2, #15
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	4013      	ands	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4b      	ldr	r2, [pc, #300]	; (80019d4 <HAL_GPIO_Init+0x2a0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0x19e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a4a      	ldr	r2, [pc, #296]	; (80019d8 <HAL_GPIO_Init+0x2a4>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00d      	beq.n	80018ce <HAL_GPIO_Init+0x19a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a49      	ldr	r2, [pc, #292]	; (80019dc <HAL_GPIO_Init+0x2a8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d007      	beq.n	80018ca <HAL_GPIO_Init+0x196>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a48      	ldr	r2, [pc, #288]	; (80019e0 <HAL_GPIO_Init+0x2ac>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_GPIO_Init+0x192>
 80018c2:	2303      	movs	r3, #3
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x1a0>
 80018c6:	2304      	movs	r3, #4
 80018c8:	e004      	b.n	80018d4 <HAL_GPIO_Init+0x1a0>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e002      	b.n	80018d4 <HAL_GPIO_Init+0x1a0>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_GPIO_Init+0x1a0>
 80018d2:	2300      	movs	r3, #0
 80018d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d6:	f002 0203 	and.w	r2, r2, #3
 80018da:	0092      	lsls	r2, r2, #2
 80018dc:	4093      	lsls	r3, r2
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018e4:	493a      	ldr	r1, [pc, #232]	; (80019d0 <HAL_GPIO_Init+0x29c>)
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	3302      	adds	r3, #2
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018fe:	4b39      	ldr	r3, [pc, #228]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4938      	ldr	r1, [pc, #224]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]
 800190a:	e006      	b.n	800191a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800190c:	4b35      	ldr	r3, [pc, #212]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	43db      	mvns	r3, r3
 8001914:	4933      	ldr	r1, [pc, #204]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 8001916:	4013      	ands	r3, r2
 8001918:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001926:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	492e      	ldr	r1, [pc, #184]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
 8001932:	e006      	b.n	8001942 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001934:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	43db      	mvns	r3, r3
 800193c:	4929      	ldr	r1, [pc, #164]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 800193e:	4013      	ands	r3, r2
 8001940:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d006      	beq.n	800195c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800194e:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	4924      	ldr	r1, [pc, #144]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
 800195a:	e006      	b.n	800196a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800195c:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	43db      	mvns	r3, r3
 8001964:	491f      	ldr	r1, [pc, #124]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 8001966:	4013      	ands	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001976:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	491a      	ldr	r1, [pc, #104]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	60cb      	str	r3, [r1, #12]
 8001982:	e006      	b.n	8001992 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	43db      	mvns	r3, r3
 800198c:	4915      	ldr	r1, [pc, #84]	; (80019e4 <HAL_GPIO_Init+0x2b0>)
 800198e:	4013      	ands	r3, r2
 8001990:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	3301      	adds	r3, #1
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	fa22 f303 	lsr.w	r3, r2, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f47f aed0 	bne.w	8001748 <HAL_GPIO_Init+0x14>
  }
}
 80019a8:	bf00      	nop
 80019aa:	372c      	adds	r7, #44	; 0x2c
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	10210000 	.word	0x10210000
 80019b8:	10110000 	.word	0x10110000
 80019bc:	10120000 	.word	0x10120000
 80019c0:	10310000 	.word	0x10310000
 80019c4:	10320000 	.word	0x10320000
 80019c8:	10220000 	.word	0x10220000
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40010000 	.word	0x40010000
 80019d4:	40010800 	.word	0x40010800
 80019d8:	40010c00 	.word	0x40010c00
 80019dc:	40011000 	.word	0x40011000
 80019e0:	40011400 	.word	0x40011400
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e26c      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8087 	beq.w	8001b16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a08:	4b92      	ldr	r3, [pc, #584]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	d00c      	beq.n	8001a2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a14:	4b8f      	ldr	r3, [pc, #572]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d112      	bne.n	8001a46 <HAL_RCC_OscConfig+0x5e>
 8001a20:	4b8c      	ldr	r3, [pc, #560]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2c:	d10b      	bne.n	8001a46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2e:	4b89      	ldr	r3, [pc, #548]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d06c      	beq.n	8001b14 <HAL_RCC_OscConfig+0x12c>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d168      	bne.n	8001b14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e246      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4e:	d106      	bne.n	8001a5e <HAL_RCC_OscConfig+0x76>
 8001a50:	4b80      	ldr	r3, [pc, #512]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a7f      	ldr	r2, [pc, #508]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	e02e      	b.n	8001abc <HAL_RCC_OscConfig+0xd4>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x98>
 8001a66:	4b7b      	ldr	r3, [pc, #492]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a7a      	ldr	r2, [pc, #488]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b78      	ldr	r3, [pc, #480]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a77      	ldr	r2, [pc, #476]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e01d      	b.n	8001abc <HAL_RCC_OscConfig+0xd4>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0xbc>
 8001a8a:	4b72      	ldr	r3, [pc, #456]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a71      	ldr	r2, [pc, #452]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a6e      	ldr	r2, [pc, #440]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e00b      	b.n	8001abc <HAL_RCC_OscConfig+0xd4>
 8001aa4:	4b6b      	ldr	r3, [pc, #428]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a6a      	ldr	r2, [pc, #424]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b68      	ldr	r3, [pc, #416]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a67      	ldr	r2, [pc, #412]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d013      	beq.n	8001aec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff faee 	bl	80010a4 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff faea 	bl	80010a4 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e1fa      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0xe4>
 8001aea:	e014      	b.n	8001b16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fada 	bl	80010a4 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af4:	f7ff fad6 	bl	80010a4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	; 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e1e6      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x10c>
 8001b12:	e000      	b.n	8001b16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d063      	beq.n	8001bea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b22:	4b4c      	ldr	r3, [pc, #304]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00b      	beq.n	8001b46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b2e:	4b49      	ldr	r3, [pc, #292]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d11c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x18c>
 8001b3a:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d116      	bne.n	8001b74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b46:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_RCC_OscConfig+0x176>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e1ba      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	4939      	ldr	r1, [pc, #228]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b72:	e03a      	b.n	8001bea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d020      	beq.n	8001bbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b7c:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7ff fa8f 	bl	80010a4 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8a:	f7ff fa8b 	bl	80010a4 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e19b      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4927      	ldr	r1, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
 8001bbc:	e015      	b.n	8001bea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fa6e 	bl	80010a4 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bcc:	f7ff fa6a 	bl	80010a4 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e17a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d03a      	beq.n	8001c6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d019      	beq.n	8001c32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c04:	f7ff fa4e 	bl	80010a4 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0c:	f7ff fa4a 	bl	80010a4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e15a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f000 faa8 	bl	8002180 <RCC_Delay>
 8001c30:	e01c      	b.n	8001c6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_RCC_OscConfig+0x274>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c38:	f7ff fa34 	bl	80010a4 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3e:	e00f      	b.n	8001c60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c40:	f7ff fa30 	bl	80010a4 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d908      	bls.n	8001c60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e140      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	42420000 	.word	0x42420000
 8001c5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c60:	4b9e      	ldr	r3, [pc, #632]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1e9      	bne.n	8001c40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80a6 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c7e:	4b97      	ldr	r3, [pc, #604]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10d      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	4b94      	ldr	r3, [pc, #592]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4a93      	ldr	r2, [pc, #588]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	61d3      	str	r3, [r2, #28]
 8001c96:	4b91      	ldr	r3, [pc, #580]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	4b8e      	ldr	r3, [pc, #568]	; (8001ee0 <HAL_RCC_OscConfig+0x4f8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d118      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb2:	4b8b      	ldr	r3, [pc, #556]	; (8001ee0 <HAL_RCC_OscConfig+0x4f8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a8a      	ldr	r2, [pc, #552]	; (8001ee0 <HAL_RCC_OscConfig+0x4f8>)
 8001cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cbe:	f7ff f9f1 	bl	80010a4 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc6:	f7ff f9ed 	bl	80010a4 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b64      	cmp	r3, #100	; 0x64
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e0fd      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd8:	4b81      	ldr	r3, [pc, #516]	; (8001ee0 <HAL_RCC_OscConfig+0x4f8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x312>
 8001cec:	4b7b      	ldr	r3, [pc, #492]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a7a      	ldr	r2, [pc, #488]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	e02d      	b.n	8001d56 <HAL_RCC_OscConfig+0x36e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x334>
 8001d02:	4b76      	ldr	r3, [pc, #472]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a75      	ldr	r2, [pc, #468]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	6213      	str	r3, [r2, #32]
 8001d0e:	4b73      	ldr	r3, [pc, #460]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a72      	ldr	r2, [pc, #456]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	6213      	str	r3, [r2, #32]
 8001d1a:	e01c      	b.n	8001d56 <HAL_RCC_OscConfig+0x36e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b05      	cmp	r3, #5
 8001d22:	d10c      	bne.n	8001d3e <HAL_RCC_OscConfig+0x356>
 8001d24:	4b6d      	ldr	r3, [pc, #436]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4a6c      	ldr	r2, [pc, #432]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	f043 0304 	orr.w	r3, r3, #4
 8001d2e:	6213      	str	r3, [r2, #32]
 8001d30:	4b6a      	ldr	r3, [pc, #424]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4a69      	ldr	r2, [pc, #420]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6213      	str	r3, [r2, #32]
 8001d3c:	e00b      	b.n	8001d56 <HAL_RCC_OscConfig+0x36e>
 8001d3e:	4b67      	ldr	r3, [pc, #412]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4a66      	ldr	r2, [pc, #408]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	6213      	str	r3, [r2, #32]
 8001d4a:	4b64      	ldr	r3, [pc, #400]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	4a63      	ldr	r2, [pc, #396]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	f023 0304 	bic.w	r3, r3, #4
 8001d54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d015      	beq.n	8001d8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5e:	f7ff f9a1 	bl	80010a4 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d64:	e00a      	b.n	8001d7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d66:	f7ff f99d 	bl	80010a4 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e0ab      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d7c:	4b57      	ldr	r3, [pc, #348]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0ee      	beq.n	8001d66 <HAL_RCC_OscConfig+0x37e>
 8001d88:	e014      	b.n	8001db4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8a:	f7ff f98b 	bl	80010a4 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d90:	e00a      	b.n	8001da8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f7ff f987 	bl	80010a4 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e095      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da8:	4b4c      	ldr	r3, [pc, #304]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1ee      	bne.n	8001d92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d105      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dba:	4b48      	ldr	r3, [pc, #288]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4a47      	ldr	r2, [pc, #284]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8081 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd0:	4b42      	ldr	r3, [pc, #264]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d061      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d146      	bne.n	8001e72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de4:	4b3f      	ldr	r3, [pc, #252]	; (8001ee4 <HAL_RCC_OscConfig+0x4fc>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff f95b 	bl	80010a4 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f957 	bl	80010a4 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e067      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e04:	4b35      	ldr	r3, [pc, #212]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e18:	d108      	bne.n	8001e2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e1a:	4b30      	ldr	r3, [pc, #192]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	492d      	ldr	r1, [pc, #180]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2c:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a19      	ldr	r1, [r3, #32]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	4927      	ldr	r1, [pc, #156]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <HAL_RCC_OscConfig+0x4fc>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff f92b 	bl	80010a4 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff f927 	bl	80010a4 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e037      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x46a>
 8001e70:	e02f      	b.n	8001ed2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <HAL_RCC_OscConfig+0x4fc>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff f914 	bl	80010a4 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff f910 	bl	80010a4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e020      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x498>
 8001e9e:	e018      	b.n	8001ed2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e013      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	42420060 	.word	0x42420060

08001ee8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0d0      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001efc:	4b6a      	ldr	r3, [pc, #424]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d910      	bls.n	8001f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b67      	ldr	r3, [pc, #412]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 0207 	bic.w	r2, r3, #7
 8001f12:	4965      	ldr	r1, [pc, #404]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b63      	ldr	r3, [pc, #396]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0b8      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d020      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f44:	4b59      	ldr	r3, [pc, #356]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a58      	ldr	r2, [pc, #352]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f5c:	4b53      	ldr	r3, [pc, #332]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4a52      	ldr	r2, [pc, #328]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f68:	4b50      	ldr	r3, [pc, #320]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	494d      	ldr	r1, [pc, #308]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d040      	beq.n	8002008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	4b47      	ldr	r3, [pc, #284]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d115      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e07f      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa6:	4b41      	ldr	r3, [pc, #260]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e073      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb6:	4b3d      	ldr	r3, [pc, #244]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e06b      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc6:	4b39      	ldr	r3, [pc, #228]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f023 0203 	bic.w	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4936      	ldr	r1, [pc, #216]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd8:	f7ff f864 	bl	80010a4 <HAL_GetTick>
 8001fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe0:	f7ff f860 	bl	80010a4 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e053      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 020c 	and.w	r2, r3, #12
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	429a      	cmp	r2, r3
 8002006:	d1eb      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002008:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d210      	bcs.n	8002038 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 0207 	bic.w	r2, r3, #7
 800201e:	4922      	ldr	r1, [pc, #136]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e032      	b.n	800209e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002044:	4b19      	ldr	r3, [pc, #100]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4916      	ldr	r1, [pc, #88]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	490e      	ldr	r1, [pc, #56]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002076:	f000 f821 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 800207a:	4601      	mov	r1, r0
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002088:	5cd3      	ldrb	r3, [r2, r3]
 800208a:	fa21 f303 	lsr.w	r3, r1, r3
 800208e:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe ffc2 	bl	8001020 <HAL_InitTick>

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40022000 	.word	0x40022000
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08002e38 	.word	0x08002e38
 80020b4:	20000000 	.word	0x20000000
 80020b8:	2000000c 	.word	0x2000000c

080020bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020bc:	b490      	push	{r4, r7}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020c2:	4b2a      	ldr	r3, [pc, #168]	; (800216c <HAL_RCC_GetSysClockFreq+0xb0>)
 80020c4:	1d3c      	adds	r4, r7, #4
 80020c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020cc:	4b28      	ldr	r3, [pc, #160]	; (8002170 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020e6:	4b23      	ldr	r3, [pc, #140]	; (8002174 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d002      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x40>
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d003      	beq.n	8002102 <HAL_RCC_GetSysClockFreq+0x46>
 80020fa:	e02d      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020fc:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020fe:	623b      	str	r3, [r7, #32]
      break;
 8002100:	e02d      	b.n	800215e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	0c9b      	lsrs	r3, r3, #18
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800210e:	4413      	add	r3, r2
 8002110:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002114:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	0c5b      	lsrs	r3, r3, #17
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800212e:	4413      	add	r3, r2
 8002130:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002134:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	4a0f      	ldr	r2, [pc, #60]	; (8002178 <HAL_RCC_GetSysClockFreq+0xbc>)
 800213a:	fb02 f203 	mul.w	r2, r2, r3
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
 8002146:	e004      	b.n	8002152 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	4a0c      	ldr	r2, [pc, #48]	; (800217c <HAL_RCC_GetSysClockFreq+0xc0>)
 800214c:	fb02 f303 	mul.w	r3, r2, r3
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	623b      	str	r3, [r7, #32]
      break;
 8002156:	e002      	b.n	800215e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002158:	4b07      	ldr	r3, [pc, #28]	; (8002178 <HAL_RCC_GetSysClockFreq+0xbc>)
 800215a:	623b      	str	r3, [r7, #32]
      break;
 800215c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215e:	6a3b      	ldr	r3, [r7, #32]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3728      	adds	r7, #40	; 0x28
 8002164:	46bd      	mov	sp, r7
 8002166:	bc90      	pop	{r4, r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	08002e24 	.word	0x08002e24
 8002170:	08002e34 	.word	0x08002e34
 8002174:	40021000 	.word	0x40021000
 8002178:	007a1200 	.word	0x007a1200
 800217c:	003d0900 	.word	0x003d0900

08002180 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <RCC_Delay+0x34>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <RCC_Delay+0x38>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0a5b      	lsrs	r3, r3, #9
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800219c:	bf00      	nop
  }
  while (Delay --);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1e5a      	subs	r2, r3, #1
 80021a2:	60fa      	str	r2, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f9      	bne.n	800219c <RCC_Delay+0x1c>
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000000 	.word	0x20000000
 80021b8:	10624dd3 	.word	0x10624dd3

080021bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d001      	beq.n	80021d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e032      	b.n	800223a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a18      	ldr	r2, [pc, #96]	; (8002244 <HAL_TIM_Base_Start+0x88>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00e      	beq.n	8002204 <HAL_TIM_Base_Start+0x48>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ee:	d009      	beq.n	8002204 <HAL_TIM_Base_Start+0x48>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <HAL_TIM_Base_Start+0x8c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d004      	beq.n	8002204 <HAL_TIM_Base_Start+0x48>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a13      	ldr	r2, [pc, #76]	; (800224c <HAL_TIM_Base_Start+0x90>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d111      	bne.n	8002228 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b06      	cmp	r3, #6
 8002214:	d010      	beq.n	8002238 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 0201 	orr.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002226:	e007      	b.n	8002238 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	40012c00 	.word	0x40012c00
 8002248:	40000400 	.word	0x40000400
 800224c:	40000800 	.word	0x40000800

08002250 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e041      	b.n	80022e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f839 	bl	80022ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3304      	adds	r3, #4
 800228c:	4619      	mov	r1, r3
 800228e:	4610      	mov	r0, r2
 8002290:	f000 fac2 	bl	8002818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d109      	bne.n	8002324 <HAL_TIM_PWM_Start+0x24>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	bf14      	ite	ne
 800231c:	2301      	movne	r3, #1
 800231e:	2300      	moveq	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	e022      	b.n	800236a <HAL_TIM_PWM_Start+0x6a>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b04      	cmp	r3, #4
 8002328:	d109      	bne.n	800233e <HAL_TIM_PWM_Start+0x3e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	bf14      	ite	ne
 8002336:	2301      	movne	r3, #1
 8002338:	2300      	moveq	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	e015      	b.n	800236a <HAL_TIM_PWM_Start+0x6a>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b08      	cmp	r3, #8
 8002342:	d109      	bne.n	8002358 <HAL_TIM_PWM_Start+0x58>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	bf14      	ite	ne
 8002350:	2301      	movne	r3, #1
 8002352:	2300      	moveq	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	e008      	b.n	800236a <HAL_TIM_PWM_Start+0x6a>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	bf14      	ite	ne
 8002364:	2301      	movne	r3, #1
 8002366:	2300      	moveq	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e05e      	b.n	8002430 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <HAL_TIM_PWM_Start+0x82>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002380:	e013      	b.n	80023aa <HAL_TIM_PWM_Start+0xaa>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b04      	cmp	r3, #4
 8002386:	d104      	bne.n	8002392 <HAL_TIM_PWM_Start+0x92>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002390:	e00b      	b.n	80023aa <HAL_TIM_PWM_Start+0xaa>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b08      	cmp	r3, #8
 8002396:	d104      	bne.n	80023a2 <HAL_TIM_PWM_Start+0xa2>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023a0:	e003      	b.n	80023aa <HAL_TIM_PWM_Start+0xaa>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2202      	movs	r2, #2
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2201      	movs	r2, #1
 80023b0:	6839      	ldr	r1, [r7, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fc1a 	bl	8002bec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a1e      	ldr	r2, [pc, #120]	; (8002438 <HAL_TIM_PWM_Start+0x138>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d107      	bne.n	80023d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a18      	ldr	r2, [pc, #96]	; (8002438 <HAL_TIM_PWM_Start+0x138>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00e      	beq.n	80023fa <HAL_TIM_PWM_Start+0xfa>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e4:	d009      	beq.n	80023fa <HAL_TIM_PWM_Start+0xfa>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a14      	ldr	r2, [pc, #80]	; (800243c <HAL_TIM_PWM_Start+0x13c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d004      	beq.n	80023fa <HAL_TIM_PWM_Start+0xfa>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a12      	ldr	r2, [pc, #72]	; (8002440 <HAL_TIM_PWM_Start+0x140>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d111      	bne.n	800241e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b06      	cmp	r3, #6
 800240a:	d010      	beq.n	800242e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241c:	e007      	b.n	800242e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0201 	orr.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40000400 	.word	0x40000400
 8002440:	40000800 	.word	0x40000800

08002444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b02      	cmp	r3, #2
 8002458:	d122      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b02      	cmp	r3, #2
 8002466:	d11b      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0202 	mvn.w	r2, #2
 8002470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f9ab 	bl	80027e2 <HAL_TIM_IC_CaptureCallback>
 800248c:	e005      	b.n	800249a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f99e 	bl	80027d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f9ad 	bl	80027f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d122      	bne.n	80024f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d11b      	bne.n	80024f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0204 	mvn.w	r2, #4
 80024c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2202      	movs	r2, #2
 80024ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f981 	bl	80027e2 <HAL_TIM_IC_CaptureCallback>
 80024e0:	e005      	b.n	80024ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f974 	bl	80027d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f983 	bl	80027f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d122      	bne.n	8002548 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b08      	cmp	r3, #8
 800250e:	d11b      	bne.n	8002548 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0208 	mvn.w	r2, #8
 8002518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2204      	movs	r2, #4
 800251e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f957 	bl	80027e2 <HAL_TIM_IC_CaptureCallback>
 8002534:	e005      	b.n	8002542 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f94a 	bl	80027d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f959 	bl	80027f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b10      	cmp	r3, #16
 8002554:	d122      	bne.n	800259c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b10      	cmp	r3, #16
 8002562:	d11b      	bne.n	800259c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0210 	mvn.w	r2, #16
 800256c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2208      	movs	r2, #8
 8002572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f92d 	bl	80027e2 <HAL_TIM_IC_CaptureCallback>
 8002588:	e005      	b.n	8002596 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f920 	bl	80027d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f92f 	bl	80027f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d10e      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d107      	bne.n	80025c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0201 	mvn.w	r2, #1
 80025c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe fba8 	bl	8000d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d2:	2b80      	cmp	r3, #128	; 0x80
 80025d4:	d10e      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e0:	2b80      	cmp	r3, #128	; 0x80
 80025e2:	d107      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fb29 	bl	8002c46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fe:	2b40      	cmp	r3, #64	; 0x40
 8002600:	d10e      	bne.n	8002620 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b40      	cmp	r3, #64	; 0x40
 800260e:	d107      	bne.n	8002620 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f8f3 	bl	8002806 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b20      	cmp	r3, #32
 800262c:	d10e      	bne.n	800264c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	2b20      	cmp	r3, #32
 800263a:	d107      	bne.n	800264c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f06f 0220 	mvn.w	r2, #32
 8002644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 faf4 	bl	8002c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800266a:	2302      	movs	r3, #2
 800266c:	e0ac      	b.n	80027c8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	f200 809f 	bhi.w	80027bc <HAL_TIM_PWM_ConfigChannel+0x168>
 800267e:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002684:	080026b9 	.word	0x080026b9
 8002688:	080027bd 	.word	0x080027bd
 800268c:	080027bd 	.word	0x080027bd
 8002690:	080027bd 	.word	0x080027bd
 8002694:	080026f9 	.word	0x080026f9
 8002698:	080027bd 	.word	0x080027bd
 800269c:	080027bd 	.word	0x080027bd
 80026a0:	080027bd 	.word	0x080027bd
 80026a4:	0800273b 	.word	0x0800273b
 80026a8:	080027bd 	.word	0x080027bd
 80026ac:	080027bd 	.word	0x080027bd
 80026b0:	080027bd 	.word	0x080027bd
 80026b4:	0800277b 	.word	0x0800277b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68b9      	ldr	r1, [r7, #8]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f90c 	bl	80028dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0208 	orr.w	r2, r2, #8
 80026d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0204 	bic.w	r2, r2, #4
 80026e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6999      	ldr	r1, [r3, #24]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	619a      	str	r2, [r3, #24]
      break;
 80026f6:	e062      	b.n	80027be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f952 	bl	80029a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6999      	ldr	r1, [r3, #24]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	021a      	lsls	r2, r3, #8
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	619a      	str	r2, [r3, #24]
      break;
 8002738:	e041      	b.n	80027be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68b9      	ldr	r1, [r7, #8]
 8002740:	4618      	mov	r0, r3
 8002742:	f000 f99b 	bl	8002a7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0208 	orr.w	r2, r2, #8
 8002754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0204 	bic.w	r2, r2, #4
 8002764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69d9      	ldr	r1, [r3, #28]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	61da      	str	r2, [r3, #28]
      break;
 8002778:	e021      	b.n	80027be <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	4618      	mov	r0, r3
 8002782:	f000 f9e5 	bl	8002b50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69da      	ldr	r2, [r3, #28]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69d9      	ldr	r1, [r3, #28]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	021a      	lsls	r2, r3, #8
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	61da      	str	r2, [r3, #28]
      break;
 80027ba:	e000      	b.n	80027be <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80027bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr

080027e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a29      	ldr	r2, [pc, #164]	; (80028d0 <TIM_Base_SetConfig+0xb8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00b      	beq.n	8002848 <TIM_Base_SetConfig+0x30>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002836:	d007      	beq.n	8002848 <TIM_Base_SetConfig+0x30>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a26      	ldr	r2, [pc, #152]	; (80028d4 <TIM_Base_SetConfig+0xbc>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d003      	beq.n	8002848 <TIM_Base_SetConfig+0x30>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <TIM_Base_SetConfig+0xc0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d108      	bne.n	800285a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <TIM_Base_SetConfig+0xb8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00b      	beq.n	800287a <TIM_Base_SetConfig+0x62>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002868:	d007      	beq.n	800287a <TIM_Base_SetConfig+0x62>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a19      	ldr	r2, [pc, #100]	; (80028d4 <TIM_Base_SetConfig+0xbc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d003      	beq.n	800287a <TIM_Base_SetConfig+0x62>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <TIM_Base_SetConfig+0xc0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d108      	bne.n	800288c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <TIM_Base_SetConfig+0xb8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d103      	bne.n	80028c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	615a      	str	r2, [r3, #20]
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	40012c00 	.word	0x40012c00
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40000800 	.word	0x40000800

080028dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	f023 0201 	bic.w	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f023 0303 	bic.w	r3, r3, #3
 8002912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f023 0302 	bic.w	r3, r3, #2
 8002924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a1c      	ldr	r2, [pc, #112]	; (80029a4 <TIM_OC1_SetConfig+0xc8>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d10c      	bne.n	8002952 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f023 0308 	bic.w	r3, r3, #8
 800293e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f023 0304 	bic.w	r3, r3, #4
 8002950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a13      	ldr	r2, [pc, #76]	; (80029a4 <TIM_OC1_SetConfig+0xc8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d111      	bne.n	800297e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	621a      	str	r2, [r3, #32]
}
 8002998:	bf00      	nop
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40012c00 	.word	0x40012c00

080029a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f023 0210 	bic.w	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f023 0320 	bic.w	r3, r3, #32
 80029f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a1d      	ldr	r2, [pc, #116]	; (8002a78 <TIM_OC2_SetConfig+0xd0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d10d      	bne.n	8002a24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a14      	ldr	r2, [pc, #80]	; (8002a78 <TIM_OC2_SetConfig+0xd0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d113      	bne.n	8002a54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	621a      	str	r2, [r3, #32]
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	40012c00 	.word	0x40012c00

08002a7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0303 	bic.w	r3, r3, #3
 8002ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <TIM_OC3_SetConfig+0xd0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d10d      	bne.n	8002af6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <TIM_OC3_SetConfig+0xd0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d113      	bne.n	8002b26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	621a      	str	r2, [r3, #32]
}
 8002b40:	bf00      	nop
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40012c00 	.word	0x40012c00

08002b50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	031b      	lsls	r3, r3, #12
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a0f      	ldr	r2, [pc, #60]	; (8002be8 <TIM_OC4_SetConfig+0x98>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d109      	bne.n	8002bc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	019b      	lsls	r3, r3, #6
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	621a      	str	r2, [r3, #32]
}
 8002bde:	bf00      	nop
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	40012c00 	.word	0x40012c00

08002bec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2201      	movs	r2, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a1a      	ldr	r2, [r3, #32]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	401a      	ands	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a1a      	ldr	r2, [r3, #32]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	fa01 f303 	lsl.w	r3, r1, r3
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	621a      	str	r2, [r3, #32]
}
 8002c2a:	bf00      	nop
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <__errno>:
 8002c58:	4b01      	ldr	r3, [pc, #4]	; (8002c60 <__errno+0x8>)
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000014 	.word	0x20000014

08002c64 <__libc_init_array>:
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	2500      	movs	r5, #0
 8002c68:	4e0c      	ldr	r6, [pc, #48]	; (8002c9c <__libc_init_array+0x38>)
 8002c6a:	4c0d      	ldr	r4, [pc, #52]	; (8002ca0 <__libc_init_array+0x3c>)
 8002c6c:	1ba4      	subs	r4, r4, r6
 8002c6e:	10a4      	asrs	r4, r4, #2
 8002c70:	42a5      	cmp	r5, r4
 8002c72:	d109      	bne.n	8002c88 <__libc_init_array+0x24>
 8002c74:	f000 f8ca 	bl	8002e0c <_init>
 8002c78:	2500      	movs	r5, #0
 8002c7a:	4e0a      	ldr	r6, [pc, #40]	; (8002ca4 <__libc_init_array+0x40>)
 8002c7c:	4c0a      	ldr	r4, [pc, #40]	; (8002ca8 <__libc_init_array+0x44>)
 8002c7e:	1ba4      	subs	r4, r4, r6
 8002c80:	10a4      	asrs	r4, r4, #2
 8002c82:	42a5      	cmp	r5, r4
 8002c84:	d105      	bne.n	8002c92 <__libc_init_array+0x2e>
 8002c86:	bd70      	pop	{r4, r5, r6, pc}
 8002c88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c8c:	4798      	blx	r3
 8002c8e:	3501      	adds	r5, #1
 8002c90:	e7ee      	b.n	8002c70 <__libc_init_array+0xc>
 8002c92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c96:	4798      	blx	r3
 8002c98:	3501      	adds	r5, #1
 8002c9a:	e7f2      	b.n	8002c82 <__libc_init_array+0x1e>
 8002c9c:	08002f48 	.word	0x08002f48
 8002ca0:	08002f48 	.word	0x08002f48
 8002ca4:	08002f48 	.word	0x08002f48
 8002ca8:	08002f4c 	.word	0x08002f4c

08002cac <memset>:
 8002cac:	4603      	mov	r3, r0
 8002cae:	4402      	add	r2, r0
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d100      	bne.n	8002cb6 <memset+0xa>
 8002cb4:	4770      	bx	lr
 8002cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cba:	e7f9      	b.n	8002cb0 <memset+0x4>

08002cbc <rand>:
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	4b13      	ldr	r3, [pc, #76]	; (8002d0c <rand+0x50>)
 8002cc0:	681c      	ldr	r4, [r3, #0]
 8002cc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cc4:	b97b      	cbnz	r3, 8002ce6 <rand+0x2a>
 8002cc6:	2018      	movs	r0, #24
 8002cc8:	f000 f82c 	bl	8002d24 <malloc>
 8002ccc:	4a10      	ldr	r2, [pc, #64]	; (8002d10 <rand+0x54>)
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <rand+0x58>)
 8002cd0:	63a0      	str	r0, [r4, #56]	; 0x38
 8002cd2:	e9c0 2300 	strd	r2, r3, [r0]
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <rand+0x5c>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	6083      	str	r3, [r0, #8]
 8002cdc:	230b      	movs	r3, #11
 8002cde:	8183      	strh	r3, [r0, #12]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002ce6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002ce8:	480c      	ldr	r0, [pc, #48]	; (8002d1c <rand+0x60>)
 8002cea:	690a      	ldr	r2, [r1, #16]
 8002cec:	694b      	ldr	r3, [r1, #20]
 8002cee:	4350      	muls	r0, r2
 8002cf0:	4c0b      	ldr	r4, [pc, #44]	; (8002d20 <rand+0x64>)
 8002cf2:	fb04 0003 	mla	r0, r4, r3, r0
 8002cf6:	fba2 2304 	umull	r2, r3, r2, r4
 8002cfa:	4403      	add	r3, r0
 8002cfc:	1c54      	adds	r4, r2, #1
 8002cfe:	f143 0500 	adc.w	r5, r3, #0
 8002d02:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8002d06:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8002d0a:	bd38      	pop	{r3, r4, r5, pc}
 8002d0c:	20000014 	.word	0x20000014
 8002d10:	abcd330e 	.word	0xabcd330e
 8002d14:	e66d1234 	.word	0xe66d1234
 8002d18:	0005deec 	.word	0x0005deec
 8002d1c:	5851f42d 	.word	0x5851f42d
 8002d20:	4c957f2d 	.word	0x4c957f2d

08002d24 <malloc>:
 8002d24:	4b02      	ldr	r3, [pc, #8]	; (8002d30 <malloc+0xc>)
 8002d26:	4601      	mov	r1, r0
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	f000 b803 	b.w	8002d34 <_malloc_r>
 8002d2e:	bf00      	nop
 8002d30:	20000014 	.word	0x20000014

08002d34 <_malloc_r>:
 8002d34:	b570      	push	{r4, r5, r6, lr}
 8002d36:	1ccd      	adds	r5, r1, #3
 8002d38:	f025 0503 	bic.w	r5, r5, #3
 8002d3c:	3508      	adds	r5, #8
 8002d3e:	2d0c      	cmp	r5, #12
 8002d40:	bf38      	it	cc
 8002d42:	250c      	movcc	r5, #12
 8002d44:	2d00      	cmp	r5, #0
 8002d46:	4606      	mov	r6, r0
 8002d48:	db01      	blt.n	8002d4e <_malloc_r+0x1a>
 8002d4a:	42a9      	cmp	r1, r5
 8002d4c:	d903      	bls.n	8002d56 <_malloc_r+0x22>
 8002d4e:	230c      	movs	r3, #12
 8002d50:	6033      	str	r3, [r6, #0]
 8002d52:	2000      	movs	r0, #0
 8002d54:	bd70      	pop	{r4, r5, r6, pc}
 8002d56:	f000 f857 	bl	8002e08 <__malloc_lock>
 8002d5a:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <_malloc_r+0xac>)
 8002d5c:	6814      	ldr	r4, [r2, #0]
 8002d5e:	4621      	mov	r1, r4
 8002d60:	b991      	cbnz	r1, 8002d88 <_malloc_r+0x54>
 8002d62:	4c20      	ldr	r4, [pc, #128]	; (8002de4 <_malloc_r+0xb0>)
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	b91b      	cbnz	r3, 8002d70 <_malloc_r+0x3c>
 8002d68:	4630      	mov	r0, r6
 8002d6a:	f000 f83d 	bl	8002de8 <_sbrk_r>
 8002d6e:	6020      	str	r0, [r4, #0]
 8002d70:	4629      	mov	r1, r5
 8002d72:	4630      	mov	r0, r6
 8002d74:	f000 f838 	bl	8002de8 <_sbrk_r>
 8002d78:	1c43      	adds	r3, r0, #1
 8002d7a:	d124      	bne.n	8002dc6 <_malloc_r+0x92>
 8002d7c:	230c      	movs	r3, #12
 8002d7e:	4630      	mov	r0, r6
 8002d80:	6033      	str	r3, [r6, #0]
 8002d82:	f000 f842 	bl	8002e0a <__malloc_unlock>
 8002d86:	e7e4      	b.n	8002d52 <_malloc_r+0x1e>
 8002d88:	680b      	ldr	r3, [r1, #0]
 8002d8a:	1b5b      	subs	r3, r3, r5
 8002d8c:	d418      	bmi.n	8002dc0 <_malloc_r+0x8c>
 8002d8e:	2b0b      	cmp	r3, #11
 8002d90:	d90f      	bls.n	8002db2 <_malloc_r+0x7e>
 8002d92:	600b      	str	r3, [r1, #0]
 8002d94:	18cc      	adds	r4, r1, r3
 8002d96:	50cd      	str	r5, [r1, r3]
 8002d98:	4630      	mov	r0, r6
 8002d9a:	f000 f836 	bl	8002e0a <__malloc_unlock>
 8002d9e:	f104 000b 	add.w	r0, r4, #11
 8002da2:	1d23      	adds	r3, r4, #4
 8002da4:	f020 0007 	bic.w	r0, r0, #7
 8002da8:	1ac3      	subs	r3, r0, r3
 8002daa:	d0d3      	beq.n	8002d54 <_malloc_r+0x20>
 8002dac:	425a      	negs	r2, r3
 8002dae:	50e2      	str	r2, [r4, r3]
 8002db0:	e7d0      	b.n	8002d54 <_malloc_r+0x20>
 8002db2:	684b      	ldr	r3, [r1, #4]
 8002db4:	428c      	cmp	r4, r1
 8002db6:	bf16      	itet	ne
 8002db8:	6063      	strne	r3, [r4, #4]
 8002dba:	6013      	streq	r3, [r2, #0]
 8002dbc:	460c      	movne	r4, r1
 8002dbe:	e7eb      	b.n	8002d98 <_malloc_r+0x64>
 8002dc0:	460c      	mov	r4, r1
 8002dc2:	6849      	ldr	r1, [r1, #4]
 8002dc4:	e7cc      	b.n	8002d60 <_malloc_r+0x2c>
 8002dc6:	1cc4      	adds	r4, r0, #3
 8002dc8:	f024 0403 	bic.w	r4, r4, #3
 8002dcc:	42a0      	cmp	r0, r4
 8002dce:	d005      	beq.n	8002ddc <_malloc_r+0xa8>
 8002dd0:	1a21      	subs	r1, r4, r0
 8002dd2:	4630      	mov	r0, r6
 8002dd4:	f000 f808 	bl	8002de8 <_sbrk_r>
 8002dd8:	3001      	adds	r0, #1
 8002dda:	d0cf      	beq.n	8002d7c <_malloc_r+0x48>
 8002ddc:	6025      	str	r5, [r4, #0]
 8002dde:	e7db      	b.n	8002d98 <_malloc_r+0x64>
 8002de0:	200000a0 	.word	0x200000a0
 8002de4:	200000a4 	.word	0x200000a4

08002de8 <_sbrk_r>:
 8002de8:	b538      	push	{r3, r4, r5, lr}
 8002dea:	2300      	movs	r3, #0
 8002dec:	4c05      	ldr	r4, [pc, #20]	; (8002e04 <_sbrk_r+0x1c>)
 8002dee:	4605      	mov	r5, r0
 8002df0:	4608      	mov	r0, r1
 8002df2:	6023      	str	r3, [r4, #0]
 8002df4:	f7fd fa70 	bl	80002d8 <_sbrk>
 8002df8:	1c43      	adds	r3, r0, #1
 8002dfa:	d102      	bne.n	8002e02 <_sbrk_r+0x1a>
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	b103      	cbz	r3, 8002e02 <_sbrk_r+0x1a>
 8002e00:	602b      	str	r3, [r5, #0]
 8002e02:	bd38      	pop	{r3, r4, r5, pc}
 8002e04:	20000368 	.word	0x20000368

08002e08 <__malloc_lock>:
 8002e08:	4770      	bx	lr

08002e0a <__malloc_unlock>:
 8002e0a:	4770      	bx	lr

08002e0c <_init>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	bf00      	nop
 8002e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e12:	bc08      	pop	{r3}
 8002e14:	469e      	mov	lr, r3
 8002e16:	4770      	bx	lr

08002e18 <_fini>:
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1a:	bf00      	nop
 8002e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1e:	bc08      	pop	{r3}
 8002e20:	469e      	mov	lr, r3
 8002e22:	4770      	bx	lr
